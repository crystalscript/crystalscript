/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crystalAst = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[2,103],$V3=[1,17],$V4=[1,18],$V5=[1,12],$V6=[1,19],$V7=[1,14],$V8=[1,13],$V9=[1,23],$Va=[5,15,42,50,54,55,62,64,67,105],$Vb=[1,35],$Vc=[1,32],$Vd=[1,34],$Ve=[1,42],$Vf=[1,69],$Vg=[1,70],$Vh=[1,76],$Vi=[1,77],$Vj=[1,44],$Vk=[1,43],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[16,17,44,46,48],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,103],$VM=[1,104],$VN=[1,97],$VO=[1,107],$VP=[1,105],$VQ=[1,94],$VR=[1,98],$VS=[1,102],$VT=[1,108],$VU=[1,129],$VV=[1,111],$VW=[1,131],$VX=[1,112],$VY=[1,114],$VZ=[1,113],$V_=[1,115],$V$=[1,116],$V01=[1,117],$V11=[1,118],$V21=[1,119],$V31=[1,120],$V41=[1,121],$V51=[1,122],$V61=[1,123],$V71=[1,124],$V81=[1,125],$V91=[1,126],$Va1=[1,127],$Vb1=[1,128],$Vc1=[1,130],$Vd1=[19,26,36,38,46,48,51,53,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,102],$Ve1=[2,188],$Vf1=[1,148],$Vg1=[1,154],$Vh1=[2,41],$Vi1=[1,155],$Vj1=[1,156],$Vk1=[1,161],$Vl1=[2,107],$Vm1=[1,169],$Vn1=[16,19,24,46,48,53,87],$Vo1=[1,180],$Vp1=[2,33],$Vq1=[2,115],$Vr1=[1,209],$Vs1=[1,208],$Vt1=[1,210],$Vu1=[1,211],$Vv1=[1,212],$Vw1=[1,213],$Vx1=[1,214],$Vy1=[1,215],$Vz1=[1,216],$VA1=[1,217],$VB1=[1,219],$VC1=[1,220],$VD1=[1,221],$VE1=[1,222],$VF1=[1,218],$VG1=[19,26,38,46,48,53,78,79,85,86,87,88,89,90,91,92,95,96,102],$VH1=[19,26,38,46,48,53,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,102],$VI1=[19,26,38,46,48,53,85,86,87,88,89,90,91,92,95,96,102],$VJ1=[19,26,38,46,48,53,89,90,91,92,95,96,102],$VK1=[19,38,46,48,53,96],$VL1=[48,53],$VM1=[36,77,87],$VN1=[46,48],$VO1=[16,33,34,36,44,50,51,71,74,77,78,79,93,94,98,100,101,103,104,118,119,120,121,122,123,124,125,130,131,132,133,134,135],$VP1=[2,50],$VQ1=[1,345],$VR1=[2,134],$VS1=[2,140],$VT1=[1,355],$VU1=[1,357],$VV1=[16,33,34,36,44,46,50,51,71,74,77,78,79,93,94,98,100,101,103,104,118,119,120,121,122,123,124,125,130,131,132,133,134,135],$VW1=[2,64],$VX1=[1,405],$VY1=[16,33,34,36,44,46,50,51,71,74,75,77,78,79,93,94,98,100,101,103,104,118,119,120,121,122,123,124,125,130,131,132,133,134,135];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"prog":3,"definitions":4,"ENDOFFILE":5,"definition":6,"visibility":7,"func_def":8,"const":9,"persist":10,"define_trait":11,"implement_trait":12,"declare_extern":13,"import_file":14,"PERSIST":15,"ID":16,"AS":17,"persist_map_def":18,"SEMICOLON":19,"persist_var_def":20,"persist_fungible_token_def":21,"persist_nonfungible_token_def":22,"type":23,"ARROW":24,"txt_with":25,"ASSIGNMENT":26,"expr":27,"FUNGIBLE_TOKEN":28,"NONFUNGIBLE_TOKEN":29,"txt_identified":30,"txt_by":31,"asset_id_type":32,"INT":33,"UINT":34,"BUFF":35,"LBRACKET":36,"int_literal":37,"RBRACKET":38,"STRING":39,"STRING-ASCII":40,"txt_from":41,"DEFINE":42,"TRAIT":43,"LBRACE":44,"trait_items":45,"RBRACE":46,"trait_item":47,"COMMA":48,"public_visibility":49,"FUNCTION":50,"LPAREN":51,"type_list":52,"RPAREN":53,"IMPLEMENT":54,"DECLARE":55,"EXTERN":56,"contract_id":57,"extern_contract_defs":58,"extern_contract_def":59,"response_type":60,"IMPLEMENTS":61,"PUBLIC":62,"READONLY":63,"IMPORT":64,"string_literal":65,"consts":66,"CONST":67,"consts_then_stmts":68,"stmts":69,"stmt":70,"IF":71,"elseif":72,"else":73,"RETURN":74,"ELSE":75,"literal":76,"DOT":77,"MINUS":78,"PLUS":79,"MULTIPLY":80,"DIVIDE":81,"MOD":82,"POW":83,"XOR":84,"GTE":85,"LTE":86,"GT":87,"LT":88,"EQUALS":89,"NOTEQUALS":90,"AND":91,"OR":92,"NOT":93,"UNWRAP":94,"EXPR_IF":95,"COLON":96,"func_call":97,"FOREACH":98,"anon_func_def":99,"PRINCIPAL":100,"OPTIONAL":101,"INSERT_ASSIGNMENT":102,"DELETE":103,"COUNTOF":104,"PRIVATE":105,"func_args_def":106,"func_args":107,"operator":108,"LE":109,"anon_func_args_def":110,"actual_type":111,"trait_type":112,"LIST":113,"BOOL":114,"mapkeysdef":115,"trait_itemtype":116,"RESPONSE":117,"CONTRACT-CALLER":118,"TX-SENDER":119,"BLOCK-HEIGHT":120,"BURN-BLOCK-HEIGHT":121,"STX-LIQUID-SUPPLY":122,"IS-IN-REGTEST":123,"NONE":124,"STX_ADDRESS":125,"bool_literal":126,"buff_literal":127,"list_literal":128,"map_literal":129,"QUOTED-STRING":130,"INT_LITERAL":131,"UINT_LITERAL":132,"TRUE":133,"FALSE":134,"HEX_NUMBER":135,"map_literal_vals":136,"list_literal_vals":137,"contract_id_relative":138,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",15:"PERSIST",16:"ID",17:"AS",19:"SEMICOLON",24:"ARROW",26:"ASSIGNMENT",28:"FUNGIBLE_TOKEN",29:"NONFUNGIBLE_TOKEN",33:"INT",34:"UINT",35:"BUFF",36:"LBRACKET",38:"RBRACKET",39:"STRING",40:"STRING-ASCII",42:"DEFINE",43:"TRAIT",44:"LBRACE",46:"RBRACE",48:"COMMA",50:"FUNCTION",51:"LPAREN",53:"RPAREN",54:"IMPLEMENT",55:"DECLARE",56:"EXTERN",61:"IMPLEMENTS",62:"PUBLIC",63:"READONLY",64:"IMPORT",67:"CONST",71:"IF",74:"RETURN",75:"ELSE",77:"DOT",78:"MINUS",79:"PLUS",80:"MULTIPLY",81:"DIVIDE",82:"MOD",83:"POW",84:"XOR",85:"GTE",86:"LTE",87:"GT",88:"LT",89:"EQUALS",90:"NOTEQUALS",91:"AND",92:"OR",93:"NOT",94:"UNWRAP",95:"EXPR_IF",96:"COLON",98:"FOREACH",100:"PRINCIPAL",101:"OPTIONAL",102:"INSERT_ASSIGNMENT",103:"DELETE",104:"COUNTOF",105:"PRIVATE",109:"LE",113:"LIST",114:"BOOL",117:"RESPONSE",118:"CONTRACT-CALLER",119:"TX-SENDER",120:"BLOCK-HEIGHT",121:"BURN-BLOCK-HEIGHT",122:"STX-LIQUID-SUPPLY",123:"IS-IN-REGTEST",124:"NONE",125:"STX_ADDRESS",130:"QUOTED-STRING",131:"INT_LITERAL",132:"UINT_LITERAL",133:"TRUE",134:"FALSE",135:"HEX_NUMBER"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,5],[10,5],[10,5],[10,5],[18,3],[20,5],[21,3],[21,5],[22,4],[32,1],[32,1],[32,4],[32,4],[32,4],[25,1],[30,1],[31,1],[41,1],[11,7],[45,3],[45,1],[45,0],[47,8],[12,4],[13,7],[13,9],[13,6],[58,3],[58,1],[58,0],[59,8],[59,5],[59,3],[49,1],[49,2],[14,7],[14,5],[66,2],[66,0],[9,5],[68,2],[69,2],[69,1],[69,3],[69,2],[70,9],[70,8],[70,1],[70,3],[72,9],[72,8],[73,4],[73,0],[27,1],[27,1],[27,4],[27,3],[27,2],[27,3],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,5],[27,1],[27,6],[27,6],[27,4],[27,4],[27,3],[27,3],[27,2],[27,4],[7,2],[7,1],[7,1],[7,0],[8,8],[106,4],[106,2],[106,0],[97,4],[97,4],[97,4],[107,3],[107,3],[107,1],[107,1],[107,0],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[99,7],[110,3],[110,1],[110,0],[23,2],[23,1],[23,1],[52,3],[52,1],[52,0],[111,7],[111,1],[111,1],[111,4],[111,1],[111,4],[111,4],[111,1],[111,1],[111,3],[112,4],[116,1],[116,4],[116,4],[116,3],[116,2],[60,6],[60,5],[60,5],[115,5],[115,3],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[65,1],[37,1],[37,1],[126,1],[126,1],[127,1],[129,3],[136,5],[136,3],[128,3],[137,3],[137,1],[137,0],[57,2],[57,1],[138,3],[138,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return []; 
break;
case 3:
 this.$ = prependChild($$[$0],$$[$0-1]); 
break;
case 4: case 114:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; this.$.vis = $$[$0-1]; 
break;
case 12:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datamap', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 13:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datavar', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 14:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'ft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 15:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'nft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 16:
 this.$ = { type:'datamap', keytype:$$[$0-2], valtype:$$[$0], line:getLine(this._$) }; 
break;
case 17:
 expectText(yy, yylineno, 'initial-value', $$[$0-2]); this.$ = {  initial_val:$$[$0], line:getLine(this._$) }; Object.assign(this.$, $$[$0-4]); 
break;
case 18:
 expectText(yy, yylineno, 'unlimited-supply', $$[$0]); this.$ = {  type:'ft', total_supply:null, line:getLine(this._$) }; 
break;
case 19:
 expectText(yy, yylineno, 'total-supply', $$[$0-2]); this.$ = {  type:'ft', total_supply:$$[$0], line:getLine(this._$) }; 
break;
case 20:
 this.$ = { type:'nft', tokenidtype: $$[$0], line:getLine(this._$) }; 
break;
case 21: case 142:
 this.$ = { type:'int', line:getLine(this._$) }; 
break;
case 22: case 143:
 this.$ = { type:'uint', line:getLine(this._$) }; 
break;
case 23: case 144:
 this.$ = { type:'buff', line:getLine(this._$), size:$$[$0-1].val }; 
break;
case 24:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) parserError(yy, {line:yylineno, expected:'positive integer for index'}); 
break;
case 25:
 this.$ = { type:'string-ascii', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) parserError(yy, {line:yylineno, expected:'positive integer for index'}); 
break;
case 26:
 expectText(yy, yylineno, 'with', $$[$0]); 
break;
case 27:
 expectText(yy, yylineno, 'identified', $$[$0]); 
break;
case 28:
 expectText(yy, yylineno, 'by', $$[$0]); 
break;
case 29:
 expectText(yy, yylineno, 'from', $$[$0]); 
break;
case 30:
 this.$= { op:'trait_def', id:$$[$0-4], traits:$$[$0-2], line:getLine(this._$) }; 
break;
case 31: case 39:
 this.$=prependChild($$[$0], $$[$0-2]); 
break;
case 32: case 40:
 this.$=[$$[$0]]; 
break;
case 33: case 41: case 50:
 this.$=[]; 
break;
case 34:
 this.$={op:'extern_func_def', vis:$$[$0-7], name:$$[$0-5], args:$$[$0-3] }; Object.assign(this.$, $$[$0]); 
break;
case 35:
 this.$={ op:'impl_trait', expr:$$[$0-1], line:getLine(this._$) }; 
break;
case 36:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:$$[$0-4], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 37:
 this.$={ op:'declare_extern', type:'extern_decl', id:$$[$0-4], protect:'const', access:'contract', contract_id:$$[$0-6], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 38:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:null, defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 42:
 this.$=Object.assign({ op:'extern_func_def', name:$$[$0-5], vis:$$[$0-7], args:$$[$0-3], contract_id:null, line:getLine(this._$) }, $$[$0]); 
break;
case 43:
 this.$={ op:'extern_trait_def', id:$$[$0-3], traits:$$[$0-1], contract_id:null }; 
break;
case 44:
 this.$={ op:'extern_trait_def_impl', impl_contract_id:$$[$0], contract_id:null }; 
break;
case 46:
 this.$='read-only' 
break;
case 47:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:$$[$0-5], as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 48:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:null, as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 49:
 this.$=prependChild($$[$0], $$[$0-1]); 
break;
case 51:
 this.$ = { op:'vardecl', id:$$[$0-3], protect:'const', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 52:
 this.$ = $$[$0-1]; this.$.push.apply(this.$, $$[$0]); 
break;
case 53:
 this.$ = prependChild($$[$0], $$[$0-1]); 
break;
case 54: case 139:
 this.$ = [ $$[$0] ]; 
break;
case 55: case 112: case 138: case 186:
 this.$ = prependChild($$[$0], $$[$0-2]); 
break;
case 56:
 this.$ = [ $$[$0-1] ]; 
break;
case 57:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-6], body:$$[$0-3], elsif:$$[$0-1], else_body: $$[$0] }; 
break;
case 58:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-5], body:$$[$0-2], else_body: $$[$0] }; 
break;
case 59:
 this.$ = $$[$0]; this.$.vis='private'; 
break;
case 60:
 this.$ = { op:'return', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 61:
 this.$ = $$[$0-8]; this.$.push({ expr:$$[$0-4], body:$$[$0-1]}); 
break;
case 62:
 this.$ = [{ expr:$$[$0-4], body:$$[$0-1] }]; 
break;
case 63: case 70:
 this.$ = $$[$0-1]; 
break;
case 64:
 this.$ = null; 
break;
case 66: case 152:
 this.$={ op:'id', type:null, line:getLine(this._$), id:$$[$0] }; 
break;
case 67: case 154:
 this.$ = { op:'[]', type:null, line:getLine(this._$), expr:$$[$0-3], bracket:$$[$0-1] }; 
break;
case 68: case 155:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:$$[$0-2] }; 
break;
case 69: case 156:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:null }; 
break;
case 71:
 this.$ = { op:'sign-', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 72:
 this.$ = { op:'sign+', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 73: case 74: case 75: case 76: case 86: case 87:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), multi:[$$[$0-2], $$[$0]] }; 
break;
case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0-2], b:$$[$0] }; 
break;
case 88: case 89:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 90:
 this.$ = { op:'expr_if', type:null, line:getLine(this._$), expr:$$[$0-4], a:$$[$0-2], b:$$[$0] }; 
break;
case 91:
 this.$ = $$[$0]; 
break;
case 92:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:$$[$0-1], line:getLine(this._$) }; $$[$0-1].genesis_op = 'foreach'; 
break;
case 93:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:{op:'id',id:$$[$0-1],type:null}, line:getLine(this._$) }; 
break;
case 94: case 153:
 this.$ = { op:'principal', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 95:
 this.$ = { op:'optional', type:null, itemtype:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 96:
 this.$ = { op:'=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 97:
 this.$ = { op:'?=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 98:
 this.$ = { op:'delete', lval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 99:
 this.$ = { op:'countof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 100:
 this.$ = 'read-only'; 
break;
case 101:
 this.$ = 'public'; 
break;
case 102: case 103:
 this.$ = 'private'; 
break;
case 104:
 this.$ = { op:'func_def', vis:null, name:$$[$0-6], type:null, line:getLine(this._$), args:$$[$0-4], body:$$[$0-1], }; 
break;
case 105:
 this.$ = prependChild($$[$0], Object.assign({name:$$[$0-3], protect:'const'}, $$[$0-2])); 
break;
case 106:
 this.$ = [Object.assign({name:$$[$0-1], protect:'const'}, $$[$0])]; 
break;
case 107: case 115: case 134: case 140: case 188:
 this.$ = []; 
break;
case 108:
 this.$ = { op:'int', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 109:
 this.$ = { op:'uint', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 110:
 this.$ = { op:'func_call', name:$$[$0-3], type:null, line:getLine(this._$), args:$$[$0-1] }; 
break;
case 111:
 this.$ = prependChild($$[$0], { op:'id', id:$$[$0-2]} ); 
break;
case 113:
 this.$ = [{ op:'id', id:$$[$0] }]; 
break;
case 131:
 this.$= { op:'anon_func_def', vis:'private', args:$$[$0-5], body:$$[$0-1], type:null, line:getLine(this._$) }; 
break;
case 132:
 this.$ = prependChild($$[$0], { name:$$[$0-2], protect:'const' }); 
break;
case 133:
 this.$ = [{ name:$$[$0], protect:'const' }]; 
break;
case 135:
 this.$ = { type:'optional', itemtype:$$[$0], line:getLine(this._$) }; 
break;
case 141:
 this.$ = { type:'list', line:getLine(this._$), itemtype:$$[$0-4], size:$$[$0-1].val }; 
break;
case 145:
 this.$ = { type:'bool', line:getLine(this._$) }; 
break;
case 146:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 147:
 this.$ = { type:'string-ascii', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 148:
 this.$ = { type:'principal', line:getLine(this._$) }; 
break;
case 150:
 this.$ = { type:'map', line:getLine(this._$), maptype:$$[$0-1] }; 
break;
case 151:
 this.$ = { type:'trait', itemtype:$$[$0-1], line:getLine(this._$) }; 
break;
case 157:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-3], errtype:$$[$0-1] }; 
break;
case 158:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-2] }; 
break;
case 159:
 this.$ = { type:'response', line:getLine(this._$),  errtype:$$[$0-1] }; 
break;
case 160: case 183:
 this.$ = {}; this.$[$$[$0-4]] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 161: case 184:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 162: case 163:
 this.$ = {op:'lit', type:'principal', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 164: case 165: case 166:
 this.$ = {op:'lit', type:'uint', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 167:
 this.$ = {op:'lit', type:'bool', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 168:
 this.$ = {op:'lit', type:'none', line:getLine(this._$), subtype:'keyword', val:yytext }; 
break;
case 169:
 this.$={ op:'lit', type:'principal', line:getLine(this._$), val:$$[$0] }; 
break;
case 176:
 this.$ = {op:'lit', type:'string', line:getLine(this._$), size:BigInt(yytext.length-2), val:yytext.substring(1,yytext.length-1) }; 
break;
case 177:
 this.$ = { op:'lit', type:'int', line:getLine(this._$), val:BigInt(yytext)}; 
break;
case 178:
 this.$ = { op:'lit', type:'uint', line:getLine(this._$), val:BigInt(yytext.substring(1)) }; 
break;
case 179:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:true }; 
break;
case 180:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:false }; 
break;
case 181:
 var b=hexStringToBuffer(yytext.substr(2)); this.$ = { op:'lit', type:'buff', line:getLine(this._$), size:BigInt(b.length), val:b }; 
break;
case 182:
 this.$ = {op:'lit', type:'map', maptype:null, line:getLine(this._$), val:$$[$0-1]}; 
break;
case 185:
 this.$ = { op:'lit', type:'list', itemtype:null, line:getLine(this._$), size:BigInt($$[$0-1].length), val:$$[$0-1] }; 
break;
case 187:
 this.$ = [$$[$0]] 
break;
case 189:
 this.$=$$[$0]; this.$.val = $$[$0-1] + this.$.val; 
break;
case 191:
 this.$=$$[$0]; this.$.val = '.' + $$[$0-1] + this.$.val; 
break;
case 192:
 this.$ = { op:'lit', type:'principal', line:getLine(this._$), val:'.'+$$[$0] }; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,42:$V1,50:$V2,54:$V3,55:$V4,62:$V5,64:$V6,67:$V7,105:$V8},{1:[3]},{5:[1,20]},{1:[2,2]},{4:21,5:[2,4],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,42:$V1,50:$V2,54:$V3,55:$V4,62:$V5,64:$V6,67:$V7,105:$V8},{8:22,50:$V9},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{50:[2,101],63:[1,24]},{50:[2,102]},{16:[1,25]},{16:[1,26]},{43:[1,27]},{43:[1,28]},{56:[1,29]},{57:30,65:31,77:$Vb,125:$Vc,130:$Vd,138:33},{1:[2,1]},{5:[2,3]},o($Va,[2,5]),{16:[1,36]},{50:[2,100]},{26:[1,37]},{17:[1,38]},{16:[1,39]},{16:$Ve,27:40,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{44:[1,79],57:78,77:$Vb,125:$Vc,138:33},{16:[1,81],41:80},{17:[1,82]},{77:$Vb,138:83},o($VH,[2,190]),o([17,19,26,36,38,46,48,51,53,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,102],[2,176]),{16:[1,84]},{51:[1,85]},{16:$Ve,27:86,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{18:87,20:88,21:89,22:90,23:91,28:[1,92],29:[1,93],33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{44:[1,109]},{19:[1,110],26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($Vd1,[2,65]),o($Vd1,[2,66]),{16:[1,132]},{16:$Ve,27:133,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:134,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:135,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:136,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:137,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},o($Vd1,[2,91]),{51:[1,138]},{51:[1,139]},{51:[1,140]},{16:$Ve,27:141,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{51:[1,142]},o($Vd1,[2,162]),o($Vd1,[2,163]),o($Vd1,[2,164]),o($Vd1,[2,165]),o($Vd1,[2,166]),o($Vd1,[2,167]),o($Vd1,[2,168]),o($Vd1,[2,169]),o($Vd1,[2,170]),o($Vd1,[2,171]),o($Vd1,[2,172]),o($Vd1,[2,173]),o($Vd1,[2,174]),o($Vd1,[2,175]),{51:[1,143]},{51:[1,144]},o($Vd1,[2,177]),o($Vd1,[2,178]),o($Vd1,[2,179]),o($Vd1,[2,180]),o($Vd1,[2,181]),{16:$Ve,27:146,33:$Vf,34:$Vg,36:$Vh,37:64,38:$Ve1,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG,137:145},{16:$Vf1,136:147},{17:[1,150],44:[1,149]},{43:$Vg1,46:$Vh1,49:153,58:151,59:152,61:$Vi1,62:$Vj1},{65:157,130:$Vd},{130:[2,29]},{16:[1,158]},o($VH,[2,189]),o($VH,[2,192],{138:159,77:$Vb}),{16:$Vk1,53:$Vl1,106:160},{19:[1,162],26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{19:[1,163]},{19:[1,164]},{19:[1,165]},{19:[1,166]},{16:$Vm1,24:[1,167],25:168},{16:$Vm1,25:170},{16:[1,172],30:171},{33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,44:$VO,60:106,100:$VP,111:173,113:$VR,114:$VS,117:$VT},o($Vn1,[2,136]),o($Vn1,[2,137]),{88:[1,174]},{88:[1,175]},o($Vn1,[2,142]),o($Vn1,[2,143]),{36:[1,176]},o($Vn1,[2,145]),{36:[1,177]},{36:[1,178]},o($Vn1,[2,148]),o($Vn1,[2,149]),{16:$Vo1,115:179},{88:[1,181]},{45:182,46:$Vp1,47:183,49:184,62:$Vj1},o($Va,[2,35]),{16:$Ve,27:185,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:[1,186]},{16:$Ve,27:187,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:188,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:189,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:190,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:191,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:192,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:193,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:194,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:195,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:196,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:197,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:198,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:199,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:200,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:201,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:202,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:203,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:204,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:207,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,53:$Vq1,65:63,76:41,77:$Vk,78:$Vr1,79:$Vs1,80:$Vt1,81:$Vu1,82:$Vv1,83:$Vw1,84:$Vx1,85:$Vy1,86:$Vz1,87:$VA1,89:$VB1,91:$VC1,92:$VD1,93:$VE1,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,107:205,108:206,109:$VF1,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},o($Vd1,[2,69]),{26:$VU,36:$VV,51:$VW,53:[1,223],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($VG1,[2,71],{36:$VV,51:$VW,77:$VX,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VG1,[2,72],{36:$VV,51:$VW,77:$VX,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VH1,[2,88],{36:$VV,51:$VW,77:$VX}),o($VH1,[2,89],{36:$VV,51:$VW,77:$VX}),{16:$Ve,27:224,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:225,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:226,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},o($VH1,[2,98],{36:$VV,51:$VW,77:$VX}),{16:[1,227]},{16:$Ve,27:228,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:229,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{38:[1,230]},{26:$VU,36:$VV,38:[2,187],48:[1,231],51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{46:[1,232]},{96:[1,233]},{43:$Vg1,46:$Vh1,49:153,58:234,59:152,61:$Vi1,62:$Vj1},{16:[1,235]},{46:[1,236]},{46:[2,40],48:[1,237]},{50:[1,238]},{16:[1,239]},{43:[1,240]},{50:[2,45],63:[1,241]},{17:[1,242]},{19:[1,243]},o($VH,[2,191]),{53:[1,244]},{23:245,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},o([5,15,16,33,34,36,42,44,50,51,54,55,62,64,67,71,74,77,78,79,93,94,98,100,101,103,104,105,118,119,120,121,122,123,124,125,130,131,132,133,134,135],[2,51]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),{23:246,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{16:[1,247]},{16:[2,26]},{16:[1,248]},{16:[1,250],31:249},{16:[2,27]},o($Vn1,[2,135]),{16:[1,252],77:[1,254],100:[1,253],116:251},{23:255,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{37:256,131:$VC,132:$VD},{37:257,131:$VC,132:$VD},{37:258,131:$VC,132:$VD},{46:[1,259]},{96:[1,260]},{23:261,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,48:[1,262],60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{46:[1,263]},{46:[2,32],48:[1,264]},{50:[1,265]},{26:$VU,36:$VV,38:[1,266],51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($Vd1,[2,68]),o($VG1,[2,73],{36:$VV,51:$VW,77:$VX,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VG1,[2,74],{36:$VV,51:$VW,77:$VX,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VH1,[2,75],{36:$VV,51:$VW,77:$VX}),o($VH1,[2,76],{36:$VV,51:$VW,77:$VX}),o($VH1,[2,77],{36:$VV,51:$VW,77:$VX}),o($VH1,[2,78],{36:$VV,51:$VW,77:$VX}),o($VH1,[2,79],{36:$VV,51:$VW,77:$VX}),o($VI1,[2,80],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VI1,[2,81],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VI1,[2,82],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VI1,[2,83],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21}),o($VJ1,[2,84],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61}),o($VJ1,[2,85],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61}),o([19,26,38,46,48,53,91,92,95,96,102],[2,86],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81}),o([19,26,38,46,48,53,92,95,96,102],[2,87],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91}),{26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,96:[1,267],102:$Vc1},o($VK1,[2,96],{26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1}),o($VK1,[2,97],{26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1}),{53:[1,268]},{48:[1,269],53:[2,113]},{26:$VU,36:$VV,48:[1,270],51:$VW,53:[2,114],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($VL1,[2,116],{76:41,97:49,65:63,37:64,126:65,127:66,128:67,129:68,27:135,16:$Ve,33:$Vf,34:$Vg,36:$Vh,44:$Vi,51:$Vj,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG}),o($VL1,[2,117],{76:41,97:49,65:63,37:64,126:65,127:66,128:67,129:68,27:134,16:$Ve,33:$Vf,34:$Vg,36:$Vh,44:$Vi,51:$Vj,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG}),o($VL1,[2,118]),o($VL1,[2,119]),o($VL1,[2,120]),o($VL1,[2,121]),o($VL1,[2,122]),o($VL1,[2,123]),o($VL1,[2,124]),o($VL1,[2,125]),o($VL1,[2,126]),o($VL1,[2,127]),o($VL1,[2,128]),o($VL1,[2,129]),o($VL1,[2,130],{76:41,97:49,65:63,37:64,126:65,127:66,128:67,129:68,27:136,16:$Ve,33:$Vf,34:$Vg,36:$Vh,44:$Vi,51:$Vj,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG}),o($Vd1,[2,70]),{26:$VU,36:$VV,48:[1,271],51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{26:$VU,36:$VV,51:$VW,53:[1,272],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{26:$VU,36:$VV,51:$VW,53:[1,273],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{53:[1,274]},{26:$VU,36:$VV,51:$VW,53:[1,275],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{26:$VU,36:$VV,51:$VW,53:[1,276],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($Vd1,[2,185]),{16:$Ve,27:146,33:$Vf,34:$Vg,36:$Vh,37:64,38:$Ve1,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG,137:277},o($Vd1,[2,182]),{16:$Ve,27:278,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{46:[1,279]},{44:[1,280]},{19:[1,281]},{43:$Vg1,46:$Vh1,49:153,58:282,59:152,61:$Vi1,62:$Vj1},{16:[1,283]},{44:[1,284]},{57:285,77:$Vb,125:$Vc,138:33},{50:[2,46]},{16:[1,286]},o($Va,[2,48]),{44:[1,287]},{48:[1,288],53:[2,106]},{19:[2,16]},{26:[1,289]},{19:[2,18],26:[1,290]},{32:291,33:[1,292],34:[1,293],35:[1,294],39:[1,295],40:[1,296]},o([33,34,35,39,40],[2,28]),{36:[1,298],77:[1,299],87:[1,297]},o($VM1,[2,152]),{51:[1,300]},{16:[1,301]},{87:[1,302]},{38:[1,303]},{38:[1,304]},{38:[1,305]},o($Vn1,[2,150]),{23:306,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{48:[1,307]},{23:308,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{19:[1,309]},{45:310,46:$Vp1,47:183,49:184,62:$Vj1},{16:[1,311]},o($Vd1,[2,67]),{16:$Ve,27:312,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},o($Vd1,[2,110]),{16:$Ve,27:207,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,53:$Vq1,65:63,76:41,77:$Vk,78:$Vr1,79:$Vs1,80:$Vt1,81:$Vu1,82:$Vv1,83:$Vw1,84:$Vx1,85:$Vy1,86:$Vz1,87:$VA1,89:$VB1,91:$VC1,92:$VD1,93:$VE1,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,107:313,108:206,109:$VF1,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:207,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,53:$Vq1,65:63,76:41,77:$Vk,78:$Vr1,79:$Vs1,80:$Vt1,81:$Vu1,82:$Vv1,83:$Vw1,84:$Vx1,85:$Vy1,86:$Vz1,87:$VA1,89:$VB1,91:$VC1,92:$VD1,93:$VE1,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,107:314,108:206,109:$VF1,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:[1,316],51:[1,317],99:315},o($Vd1,[2,94]),o($Vd1,[2,95]),o($Vd1,[2,99]),o($Vd1,[2,108]),o($Vd1,[2,109]),{38:[2,186]},{26:$VU,36:$VV,46:[2,184],48:[1,318],51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{19:[1,319]},{43:$Vg1,46:$Vh1,49:153,58:320,59:152,61:$Vi1,62:$Vj1},o($Va,[2,38]),{46:[2,39]},{51:[1,321]},{45:322,46:$Vp1,47:183,49:184,62:$Vj1},o($VN1,[2,44]),{19:[1,323]},o($VO1,$VP1,{68:324,66:325,9:326,67:$V7}),{16:$Vk1,53:$Vl1,106:327},{16:$Ve,27:328,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:329,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{19:[2,20]},{19:[2,21]},{19:[2,22]},{36:[1,330]},{36:[1,331]},{36:[1,332]},o($Vn1,[2,151]),{16:$Ve,27:333,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:[1,334]},{16:$Ve,27:335,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},o($VM1,[2,156]),{36:[1,336]},o($Vn1,[2,144]),o($Vn1,[2,146]),o($Vn1,[2,147]),{46:[2,161],48:[1,337]},{23:338,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,87:[1,339],100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{87:[1,340]},o($Va,[2,30]),{46:[2,31]},{51:[1,341]},o([19,26,38,46,48,53,96,102],[2,90],{36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1}),{53:[2,111]},{53:[2,112]},{53:[1,342]},{53:[1,343]},{16:$VQ1,53:$VR1,110:344},{16:$Vf1,136:346},o($Va,[2,36]),{46:[1,347]},{23:349,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,52:348,53:$VS1,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{46:[1,350]},o($Va,[2,47]),{46:[1,351]},{8:356,16:$Ve,27:354,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,50:$V9,51:$Vj,65:63,69:352,70:353,71:$VT1,74:$VU1,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},o($VO1,$VP1,{9:326,66:358,67:$V7}),{53:[2,105]},{19:[2,17],26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{19:[2,19],26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{37:359,131:$VC,132:$VD},{37:360,131:$VC,132:$VD},{37:361,131:$VC,132:$VD},{26:$VU,36:$VV,38:[1,362],51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($VM1,[2,155]),{26:$VU,36:$VV,51:$VW,53:[1,363],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{37:364,131:$VC,132:$VD},{16:$Vo1,115:365},{87:[1,366]},o($Vn1,[2,158]),o($Vn1,[2,159]),{23:349,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,52:367,53:$VS1,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},o($Vd1,[2,92]),o($Vd1,[2,93]),{53:[1,368]},{48:[1,369],53:[2,133]},{46:[2,183]},{19:[1,370]},{53:[1,371]},{48:[1,372],53:[2,139]},o($VN1,[2,43]),o([5,15,16,33,34,36,42,44,46,50,51,54,55,62,64,67,71,74,77,78,79,93,94,98,100,101,103,104,105,118,119,120,121,122,123,124,125,130,131,132,133,134,135],[2,104]),{46:[2,52]},{8:356,16:$Ve,27:354,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,46:[2,54],50:$V9,51:$Vj,65:63,69:373,70:353,71:$VT1,74:$VU1,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{19:[1,374],26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{51:[1,375]},o($VV1,[2,59]),{16:$Ve,27:376,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},o($VO1,[2,49]),{38:[1,377]},{38:[1,378]},{38:[1,379]},o($VM1,[2,154]),o($VM1,[2,153]),{38:[1,380]},{46:[2,160]},o($Vn1,[2,157]),{53:[1,381]},{24:[1,382]},{16:$VQ1,53:$VR1,110:383},o($Va,[2,37]),{24:[1,384]},{23:349,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,52:385,53:$VS1,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},{46:[2,53]},{8:356,16:$Ve,27:354,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,46:[2,56],50:$V9,51:$Vj,65:63,69:386,70:353,71:$VT1,74:$VU1,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{16:$Ve,27:387,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{19:[1,388],26:$VU,36:$VV,51:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{19:[2,23]},{19:[2,24]},{19:[2,25]},o($Vn1,[2,141]),{24:[1,389]},{44:[1,390]},{53:[2,132]},{60:391,117:$VT},{53:[2,138]},{46:[2,55]},{26:$VU,36:$VV,51:$VW,53:[1,392],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($VV1,[2,60]),{23:393,33:$VI,34:$VJ,35:$VK,39:$VL,40:$VM,43:$VN,44:$VO,60:106,100:$VP,101:$VQ,111:96,112:95,113:$VR,114:$VS,117:$VT},o($VO1,$VP1,{66:325,9:326,68:394,67:$V7}),o($VN1,[2,42]),{44:[1,395]},o($VN1,[2,34]),{46:[1,396]},o($VO1,$VP1,{66:325,9:326,68:397,67:$V7}),{53:[2,131]},{46:[1,398]},o($VV1,$VW1,{72:399,73:400,75:[1,401]}),o($VV1,$VW1,{73:402,75:[1,403]}),o($VV1,[2,58]),{44:$VX1,71:[1,404]},o($VV1,[2,57]),{44:$VX1,71:[1,406]},{51:[1,407]},o($VO1,$VP1,{66:325,9:326,68:408,67:$V7}),{51:[1,409]},{16:$Ve,27:410,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{46:[1,411]},{16:$Ve,27:412,33:$Vf,34:$Vg,36:$Vh,37:64,44:$Vi,51:$Vj,65:63,76:41,77:$Vk,78:$Vl,79:$Vm,93:$Vn,94:$Vo,97:49,98:$Vp,100:$Vq,101:$Vr,103:$Vs,104:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,126:65,127:66,128:67,129:68,130:$Vd,131:$VC,132:$VD,133:$VE,134:$VF,135:$VG},{26:$VU,36:$VV,51:$VW,53:[1,413],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},o($VV1,[2,63]),{26:$VU,36:$VV,51:$VW,53:[1,414],77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,95:$Vb1,102:$Vc1},{44:[1,415]},{44:[1,416]},o($VO1,$VP1,{66:325,9:326,68:417,67:$V7}),o($VO1,$VP1,{66:325,9:326,68:418,67:$V7}),{46:[1,419]},{46:[1,420]},o($VY1,[2,62]),o($VY1,[2,61])],
defaultActions: {3:[2,2],13:[2,102],20:[2,1],21:[2,3],24:[2,100],81:[2,29],169:[2,26],172:[2,27],241:[2,46],246:[2,16],277:[2,186],282:[2,39],291:[2,20],292:[2,21],293:[2,22],310:[2,31],313:[2,111],314:[2,112],327:[2,105],346:[2,183],352:[2,52],365:[2,160],373:[2,53],377:[2,23],378:[2,24],379:[2,25],383:[2,132],385:[2,138],386:[2,55],396:[2,131]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function prependChild(node, child){
        node.unshift(child);
        return node;
    }
    function getLine(v) {
        if (typeof v == 'number') return v;
        return v.first_line;
    }
    function parseError(yy, opts) {
        var expected = opts.expected ? `Expecting ${opts.expected}` : '';
        yy.parser.parseError(`Parse error on line ${opts.line}:\n${yy.lexer.showPosition()}\n${expected}`, {});
    }
    function expectText(yy, lineno, desired, actual) {
        if (desired == actual) return;
        parseError(yy, {
             line: lineno,
             expected:`'${desired}' not '${actual}'`
        });
    }
    function hexStringToBuffer(str) {
        if (str.length % 2 == 1) str='0'+str;
        return Buffer.from(str,'hex');
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 64;
break;
case 2:return 67;
break;
case 3:return 105;
break;
case 4:return 62;
break;
case 5:return 63;
break;
case 6:return 50;
break;
case 7:return 15;
break;
case 8:return 55;
break;
case 9:return 56;
break;
case 10:return 42;
break;
case 11:return 'USE';
break;
case 12:return 17;
break;
case 13:return 43;
break;
case 14:return 54;
break;
case 15:return 61;
break;
case 16:return 28;
break;
case 17:return 29;
break;
case 18:return 71;
break;
case 19:return 75;
break;
case 20:return 74;
break;
case 21:return 98;
break;
case 22:return 104;
break;
case 23:return 113;
break;
case 24:return 33;
break;
case 25:return 34;
break;
case 26:return 114;
break;
case 27:return 40;
break;
case 28:return 39;
break;
case 29:return 39;
break;
case 30:return 100;
break;
case 31:return 117;
break;
case 32:return 35;
break;
case 33:return 101;
break;
case 34:return 103;
break;
case 35:return 133;
break;
case 36:return 134;
break;
case 37:return 124;
break;
case 38:return 118;
break;
case 39:return 119;
break;
case 40:return 120;
break;
case 41:return 121;
break;
case 42:return 122;
break;
case 43:return 123;
break;
case 44:return 131;
break;
case 45:return 132;
break;
case 46:return 135;
break;
case 47:return 125;
break;
case 48:return 16;
break;
case 49:return 130;
break;
case 50:return 79;
break;
case 51:return 78;
break;
case 52:return 80;
break;
case 53:return 81;
break;
case 54:return 82;
break;
case 55:return 83;
break;
case 56:return 84;
break;
case 57:return 85;
break;
case 58:return 86;
break;
case 59:return 87;
break;
case 60:return 88;
break;
case 61:return 89;
break;
case 62:return 90;
break;
case 63:return 102;
break;
case 64:return 26;
break;
case 65:return 91;
break;
case 66:return 92;
break;
case 67:return 93;
break;
case 68:return 94;
break;
case 69:return 77;
break;
case 70:return 96;
break;
case 71:return 19;
break;
case 72:return 48;
break;
case 73:return 51;
break;
case 74:return 53;
break;
case 75:return 44;
break;
case 76:return 46;
break;
case 77:return 36;
break;
case 78:return 38;
break;
case 79:return 95;
break;
case 80:return 24;
break;
case 81:/* skip whitespace */
break;
case 82:return 'UNKNOWN';
break;
case 83:return 5;
break;
case 84:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:import)/,/^(?:const)/,/^(?:private)/,/^(?:public)/,/^(?:readonly)/,/^(?:function)/,/^(?:persist)/,/^(?:declare)/,/^(?:extern)/,/^(?:define)/,/^(?:use)/,/^(?:as)/,/^(?:trait)/,/^(?:implement)/,/^(?:implements)/,/^(?:fungible-token)/,/^(?:nonfungible-token)/,/^(?:if)/,/^(?:else)/,/^(?:return)/,/^(?:foreach)/,/^(?:_countof)/,/^(?:list)/,/^(?:int)/,/^(?:uint)/,/^(?:bool)/,/^(?:string-ascii)/,/^(?:string-utf8)/,/^(?:string)/,/^(?:principal)/,/^(?:response)/,/^(?:buff)/,/^(?:optional)/,/^(?:delete)/,/^(?:true)/,/^(?:false)/,/^(?:none)/,/^(?:contract-caller)/,/^(?:tx-sender)/,/^(?:block-height)/,/^(?:burn-block-height)/,/^(?:stx-liquid-supply)/,/^(?:is-in-regtest)/,/^(?:([0-9])+)/,/^(?:u([0-9])+)/,/^(?:0x([0-9A-Fa-f])*)/,/^(?:([S][A-Z0-9]{39,40}))/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*[!?]{0,1}))/,/^(?:("(?:[^"\\]|\\.)*"))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\*\*)/,/^(?:\^)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\?=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:#)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:=>)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crystalAst;
exports.Parser = crystalAst.Parser;
exports.parse = function () { return crystalAst.parse.apply(crystalAst, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}