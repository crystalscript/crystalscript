/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crystalAst = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[2,107],$V3=[1,17],$V4=[1,18],$V5=[1,12],$V6=[1,19],$V7=[1,14],$V8=[1,13],$V9=[1,23],$Va=[5,17,36,44,48,49,56,58,61,107],$Vb=[1,35],$Vc=[1,32],$Vd=[1,34],$Ve=[1,42],$Vf=[1,79],$Vg=[1,44],$Vh=[1,78],$Vi=[1,43],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,71],$Vv=[1,72],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,64],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[18,19,38,40,42],$VK=[1,99],$VL=[1,109],$VM=[1,107],$VN=[1,96],$VO=[1,101],$VP=[1,102],$VQ=[1,100],$VR=[1,103],$VS=[1,104],$VT=[1,105],$VU=[1,106],$VV=[1,110],$VW=[1,135],$VX=[1,137],$VY=[1,113],$VZ=[1,114],$V_=[1,116],$V$=[1,115],$V01=[1,117],$V11=[1,118],$V21=[1,119],$V31=[1,120],$V41=[1,121],$V51=[1,122],$V61=[1,123],$V71=[1,124],$V81=[1,125],$V91=[1,126],$Va1=[1,127],$Vb1=[1,128],$Vc1=[1,129],$Vd1=[1,130],$Ve1=[1,131],$Vf1=[1,132],$Vg1=[1,133],$Vh1=[1,134],$Vi1=[1,136],$Vj1=[16,27,40,42,45,47,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,96,97,103],$Vk1=[1,146],$Vl1=[1,147],$Vm1=[1,151],$Vn1=[1,152],$Vo1=[2,205],$Vp1=[1,156],$Vq1=[1,163],$Vr1=[2,39],$Vs1=[1,164],$Vt1=[1,165],$Vu1=[1,170],$Vv1=[2,111],$Vw1=[1,172],$Vx1=[1,179],$Vy1=[16,18,25,40,42,47,88],$Vz1=[2,155],$VA1=[2,156],$VB1=[2,161],$VC1=[1,190],$VD1=[2,31],$VE1=[1,249],$VF1=[2,121],$VG1=[1,225],$VH1=[1,224],$VI1=[1,226],$VJ1=[1,227],$VK1=[1,228],$VL1=[1,229],$VM1=[1,231],$VN1=[1,230],$VO1=[1,232],$VP1=[1,233],$VQ1=[1,234],$VR1=[1,235],$VS1=[1,236],$VT1=[1,237],$VU1=[1,238],$VV1=[1,240],$VW1=[1,241],$VX1=[1,242],$VY1=[1,243],$VZ1=[1,246],$V_1=[1,244],$V$1=[1,247],$V02=[1,248],$V12=[1,239],$V22=[16,27,40,42,47,72,74,75,82,83,84,85,86,87,88,89,90,91,92,93,96,97,103],$V32=[16,27,40,42,47,72,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,96,97,103],$V42=[1,275],$V52=[5,16,17,18,36,38,40,44,45,48,49,56,58,61,65,68,71,73,74,75,80,94,95,99,101,102,104,105,106,107,109,110,126,127,128,129,130,131,132,133,138,139,140,141,142,143],$V62=[16,27,40,42,47,72,82,83,84,85,86,87,88,89,90,91,92,93,96,97,103],$V72=[16,27,40,42,47,72,82,83,86,87,88,89,90,91,92,93,96,97,103],$V82=[16,27,40,42,47,72,82,83,90,91,92,93,96,97,103],$V92=[16,40,42,47,72,97],$Va2=[42,47],$Vb2=[40,42,47],$Vc2=[71,73,88],$Vd2=[40,42],$Ve2=[18,38,44,45,65,68,71,73,74,75,80,94,95,99,101,102,104,105,106,109,110,126,127,128,129,130,131,132,133,138,139,140,141,142,143],$Vf2=[2,48],$Vg2=[1,378],$Vh2=[1,382],$Vi2=[2,145],$Vj2=[2,153],$Vk2=[1,393],$Vl2=[1,395],$Vm2=[18,38,40,44,45,65,68,71,73,74,75,80,94,95,99,101,102,104,105,106,109,110,126,127,128,129,130,131,132,133,138,139,140,141,142,143],$Vn2=[2,62],$Vo2=[1,438],$Vp2=[18,38,40,44,45,65,68,69,71,73,74,75,80,94,95,99,101,102,104,105,106,109,110,126,127,128,129,130,131,132,133,138,139,140,141,142,143];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"prog":3,"definitions":4,"ENDOFFILE":5,"definition":6,"visibility":7,"func_def":8,"const":9,"persist":10,"define_trait":11,"implement_trait":12,"declare_extern":13,"import_file":14,"line_termination":15,"SEMICOLON":16,"PERSIST":17,"ID":18,"AS":19,"persist_map_def":20,"persist_var_def":21,"persist_fungible_token_def":22,"persist_nonfungible_token_def":23,"type":24,"ARROW":25,"txt_with":26,"ASSIGNMENT":27,"expr":28,"FUNGIBLE_TOKEN":29,"NONFUNGIBLE_TOKEN":30,"txt_identified":31,"txt_by":32,"asset_id_type":33,"actual_type":34,"txt_from":35,"DEFINE":36,"TRAIT":37,"LBRACE":38,"trait_items":39,"RBRACE":40,"trait_item":41,"COMMA":42,"public_visibility":43,"FUNCTION":44,"LPAREN":45,"type_list":46,"RPAREN":47,"IMPLEMENT":48,"DECLARE":49,"EXTERN":50,"contract_id":51,"extern_contract_defs":52,"extern_contract_def":53,"response_type":54,"IMPLEMENTS":55,"PUBLIC":56,"READONLY":57,"IMPORT":58,"string_literal":59,"consts":60,"CONST":61,"consts_then_stmts":62,"stmts":63,"stmt":64,"IF":65,"elseif":66,"else":67,"RETURN":68,"ELSE":69,"literal":70,"LBRACKET":71,"RBRACKET":72,"DOT":73,"MINUS":74,"PLUS":75,"MULTIPLY":76,"DIVIDE":77,"MOD":78,"POW":79,"BIT_NOT":80,"BIT_XOR":81,"BIT_AND":82,"BIT_OR":83,"BIT_SHIFT_LEFT":84,"BIT_SHIFT_RIGHT":85,"GTE":86,"LTE":87,"GT":88,"LT":89,"EQUALS":90,"NOTEQUALS":91,"AND":92,"OR":93,"NOT":94,"UNWRAP":95,"EXPR_IF":96,"COLON":97,"func_call":98,"FOREACH":99,"anon_func_def":100,"PRINCIPAL":101,"OPTIONAL":102,"INSERT_ASSIGNMENT":103,"DELETE":104,"COUNTOF":105,"TYPEOF":106,"PRIVATE":107,"func_args_def":108,"INT":109,"UINT":110,"func_args":111,"operator":112,"serializable_type":113,"LE":114,"anon_func_args_def":115,"trait_type":116,"LIST":117,"int_literal":118,"BUFF":119,"BOOL":120,"STRING":121,"STRING-ASCII":122,"mapkeysdef":123,"trait_itemtype":124,"RESPONSE":125,"CONTRACT-CALLER":126,"TX-SENDER":127,"BLOCK-HEIGHT":128,"BURN-BLOCK-HEIGHT":129,"STX-LIQUID-SUPPLY":130,"IS-IN-REGTEST":131,"NONE":132,"STX_ADDRESS":133,"bool_literal":134,"buff_literal":135,"list_literal":136,"map_literal":137,"QUOTED-STRING":138,"INT_LITERAL":139,"UINT_LITERAL":140,"TRUE":141,"FALSE":142,"HEX_NUMBER":143,"map_literal_vals":144,"list_literal_vals":145,"contract_id_relative":146,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",16:"SEMICOLON",17:"PERSIST",18:"ID",19:"AS",25:"ARROW",27:"ASSIGNMENT",29:"FUNGIBLE_TOKEN",30:"NONFUNGIBLE_TOKEN",36:"DEFINE",37:"TRAIT",38:"LBRACE",40:"RBRACE",42:"COMMA",44:"FUNCTION",45:"LPAREN",47:"RPAREN",48:"IMPLEMENT",49:"DECLARE",50:"EXTERN",55:"IMPLEMENTS",56:"PUBLIC",57:"READONLY",58:"IMPORT",61:"CONST",65:"IF",68:"RETURN",69:"ELSE",71:"LBRACKET",72:"RBRACKET",73:"DOT",74:"MINUS",75:"PLUS",76:"MULTIPLY",77:"DIVIDE",78:"MOD",79:"POW",80:"BIT_NOT",81:"BIT_XOR",82:"BIT_AND",83:"BIT_OR",84:"BIT_SHIFT_LEFT",85:"BIT_SHIFT_RIGHT",86:"GTE",87:"LTE",88:"GT",89:"LT",90:"EQUALS",91:"NOTEQUALS",92:"AND",93:"OR",94:"NOT",95:"UNWRAP",96:"EXPR_IF",97:"COLON",99:"FOREACH",101:"PRINCIPAL",102:"OPTIONAL",103:"INSERT_ASSIGNMENT",104:"DELETE",105:"COUNTOF",106:"TYPEOF",107:"PRIVATE",109:"INT",110:"UINT",114:"LE",117:"LIST",119:"BUFF",120:"BOOL",121:"STRING",122:"STRING-ASCII",125:"RESPONSE",126:"CONTRACT-CALLER",127:"TX-SENDER",128:"BLOCK-HEIGHT",129:"BURN-BLOCK-HEIGHT",130:"STX-LIQUID-SUPPLY",131:"IS-IN-REGTEST",132:"NONE",133:"STX_ADDRESS",138:"QUOTED-STRING",139:"INT_LITERAL",140:"UINT_LITERAL",141:"TRUE",142:"FALSE",143:"HEX_NUMBER"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,2],[15,1],[10,5],[10,5],[10,5],[10,5],[20,3],[21,5],[22,3],[22,5],[23,4],[33,1],[26,1],[31,1],[32,1],[35,1],[11,7],[39,3],[39,1],[39,0],[41,8],[12,4],[13,7],[13,9],[13,6],[52,3],[52,1],[52,0],[53,8],[53,5],[53,3],[43,1],[43,2],[14,7],[14,5],[60,2],[60,0],[9,5],[62,2],[63,2],[63,1],[63,3],[63,2],[64,9],[64,8],[64,1],[64,3],[66,9],[66,8],[67,4],[67,0],[28,1],[28,1],[28,4],[28,3],[28,2],[28,3],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,5],[28,1],[28,6],[28,6],[28,4],[28,4],[28,3],[28,3],[28,2],[28,4],[28,4],[7,2],[7,1],[7,1],[7,0],[8,8],[108,4],[108,2],[108,0],[98,4],[98,4],[98,4],[111,3],[111,3],[111,3],[111,1],[111,1],[111,1],[111,0],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[100,7],[115,3],[115,1],[115,0],[24,2],[24,1],[24,1],[113,2],[113,1],[46,3],[46,1],[46,0],[34,7],[34,1],[34,1],[34,4],[34,1],[34,4],[34,4],[34,1],[34,1],[34,3],[116,4],[124,1],[124,4],[124,4],[124,3],[124,2],[54,6],[54,5],[54,5],[123,5],[123,5],[123,3],[123,3],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[59,1],[118,1],[118,1],[134,1],[134,1],[135,1],[137,3],[144,5],[144,5],[144,3],[144,3],[136,3],[145,3],[145,1],[145,0],[51,2],[51,1],[146,3],[146,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return []; 
break;
case 3:
 this.$ = prependChild($$[$0],$$[$0-1]); 
break;
case 4: case 120:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; this.$.vis = $$[$0-1]; 
break;
case 14:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datamap', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 15:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datavar', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 16:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'ft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 17:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'nft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 18:
 this.$ = { type:'datamap', keytype:$$[$0-2], valtype:$$[$0], line:getLine(this._$) }; 
break;
case 19:
 expectText(yy, yylineno, 'initial-value', $$[$0-2]); this.$ = {  initial_val:$$[$0], line:getLine(this._$) }; Object.assign(this.$, $$[$0-4]); 
break;
case 20:
 expectText(yy, yylineno, 'unlimited-supply', $$[$0]); this.$ = {  type:'ft', total_supply:null, line:getLine(this._$) }; 
break;
case 21:
 expectText(yy, yylineno, 'total-supply', $$[$0-2]); this.$ = {  type:'ft', total_supply:$$[$0], line:getLine(this._$) }; 
break;
case 22:
 this.$ = { type:'nft', tokenidtype: $$[$0], line:getLine(this._$) }; 
break;
case 24:
 expectText(yy, yylineno, 'with', $$[$0]); 
break;
case 25:
 expectText(yy, yylineno, 'identified', $$[$0]); 
break;
case 26:
 expectText(yy, yylineno, 'by', $$[$0]); 
break;
case 27:
 expectText(yy, yylineno, 'from', $$[$0]); 
break;
case 28:
 this.$= { op:'trait_def', id:$$[$0-4], traits:$$[$0-2], line:getLine(this._$) }; 
break;
case 29: case 37:
 this.$=prependChild($$[$0], $$[$0-2]); 
break;
case 30: case 38:
 this.$=[$$[$0]]; 
break;
case 31: case 39: case 48:
 this.$=[]; 
break;
case 32:
 this.$={op:'extern_func_def', vis:$$[$0-7], name:$$[$0-5], args:$$[$0-3] }; Object.assign(this.$, $$[$0]); 
break;
case 33:
 this.$={ op:'impl_trait', expr:$$[$0-1], line:getLine(this._$) }; 
break;
case 34:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:$$[$0-4], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 35:
 this.$={ op:'declare_extern', type:'extern_decl', id:$$[$0-4], protect:'const', access:'contract', contract_id:$$[$0-6], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 36:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:null, defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 40:
 this.$=Object.assign({ op:'extern_func_def', name:$$[$0-5], vis:$$[$0-7], args:$$[$0-3], contract_id:null, line:getLine(this._$) }, $$[$0]); 
break;
case 41:
 this.$={ op:'extern_trait_def', id:$$[$0-3], traits:$$[$0-1], contract_id:null }; 
break;
case 42:
 this.$={ op:'extern_trait_def_impl', impl_contract_id:$$[$0], contract_id:null }; 
break;
case 44:
 this.$='read-only' 
break;
case 45:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:$$[$0-5], as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 46:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:null, as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 47:
 this.$=prependChild($$[$0], $$[$0-1]); 
break;
case 49:
 this.$ = { op:'vardecl', id:$$[$0-3], protect:'const', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 50:
 this.$ = $$[$0-1]; this.$.push.apply(this.$, $$[$0]); 
break;
case 51:
 this.$ = prependChild($$[$0], $$[$0-1]); 
break;
case 52: case 152:
 this.$ = [ $$[$0] ]; 
break;
case 53: case 117: case 151: case 203:
 this.$ = prependChild($$[$0], $$[$0-2]); 
break;
case 54:
 this.$ = [ $$[$0-1] ]; 
break;
case 55:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-6], body:$$[$0-3], elsif:$$[$0-1], else_body: $$[$0] }; 
break;
case 56:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-5], body:$$[$0-2], else_body: $$[$0] }; 
break;
case 57:
 this.$ = $$[$0]; this.$.vis='private'; 
break;
case 58:
 this.$ = { op:'return', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 59:
 this.$ = $$[$0-8]; this.$.push({ expr:$$[$0-4], body:$$[$0-1]}); 
break;
case 60:
 this.$ = [{ expr:$$[$0-4], body:$$[$0-1] }]; 
break;
case 61: case 68:
 this.$ = $$[$0-1]; 
break;
case 62:
 this.$ = null; 
break;
case 64: case 165:
 this.$={ op:'id', type:null, line:getLine(this._$), id:$$[$0] }; 
break;
case 65: case 167:
 this.$ = { op:'[]', type:null, line:getLine(this._$), expr:$$[$0-3], bracket:$$[$0-1] }; 
break;
case 66: case 168:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:$$[$0-2] }; 
break;
case 67: case 169:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:null }; 
break;
case 69:
 this.$ = { op:'sign-', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 70:
 this.$ = { op:'sign+', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 71: case 72: case 73: case 74: case 89: case 90:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), multi:[$$[$0-2], $$[$0]] }; 
break;
case 75: case 76: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0-2], b:$$[$0] }; 
break;
case 77: case 91: case 92:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 93:
 this.$ = { op:'expr_if', type:null, line:getLine(this._$), expr:$$[$0-4], a:$$[$0-2], b:$$[$0] }; 
break;
case 94:
 this.$ = $$[$0]; 
break;
case 95:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:$$[$0-1], line:getLine(this._$) }; $$[$0-1].genesis_op = 'foreach'; 
break;
case 96:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:{op:'id',id:$$[$0-1],type:null}, line:getLine(this._$) }; 
break;
case 97: case 166:
 this.$ = { op:'principal', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 98:
 this.$ = { op:'optional', type:null, itemtype:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 99:
 this.$ = { op:'=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 100:
 this.$ = { op:'?=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 101:
 this.$ = { op:'delete', lval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 102:
 this.$ = { op:'_countof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 103:
 this.$ = { op:'_typeof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 104:
 this.$ = 'read-only'; 
break;
case 105:
 this.$ = 'public'; 
break;
case 106: case 107:
 this.$ = 'private'; 
break;
case 108:
 this.$ = { op:'func_def', vis:null, name:$$[$0-6], type:null, line:getLine(this._$), args:$$[$0-4], body:$$[$0-1], }; 
break;
case 109:
 this.$ = prependChild($$[$0], Object.assign({name:$$[$0-3], protect:'const'}, $$[$0-2])); 
break;
case 110:
 this.$ = [Object.assign({name:$$[$0-1], protect:'const'}, $$[$0])]; 
break;
case 111: case 121: case 145: case 153: case 205:
 this.$ = []; 
break;
case 112:
 this.$ = { op:'int', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 113:
 this.$ = { op:'uint', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 114:
 this.$ = { op:'func_call', name:$$[$0-3], type:null, line:getLine(this._$), args:$$[$0-1] }; 
break;
case 115:
 this.$ = prependChild($$[$0], { op:'id', id:$$[$0-2] }); 
break;
case 116:
 this.$ = prependChild($$[$0], { op:'lit', type:'typedef', typedef:$$[$0-2] }); 
break;
case 118:
 this.$ = [{ op:'id', id:$$[$0] }]; 
break;
case 119:
 this.$ = [{ op:'lit', type:'typedef', typedef:$$[$0] }]; 
break;
case 142:
 this.$= { op:'anon_func_def', vis:'private', args:$$[$0-5], body:$$[$0-1], type:null, line:getLine(this._$) }; 
break;
case 143:
 this.$ = prependChild($$[$0], { name:$$[$0-2], protect:'const' }); 
break;
case 144:
 this.$ = [{ name:$$[$0], protect:'const' }]; 
break;
case 146: case 149:
 this.$ = { type:'optional', itemtype:$$[$0], line:getLine(this._$) }; 
break;
case 154:
 this.$ = { type:'list', line:getLine(this._$), itemtype:$$[$0-4], size:$$[$0-1].val }; 
break;
case 155:
 this.$ = { type:'int', line:getLine(this._$) }; 
break;
case 156:
 this.$ = { type:'uint', line:getLine(this._$) }; 
break;
case 157:
 this.$ = { type:'buff', line:getLine(this._$), size:$$[$0-1].val }; 
break;
case 158:
 this.$ = { type:'bool', line:getLine(this._$) }; 
break;
case 159:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 160:
 this.$ = { type:'string-ascii', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 161:
 this.$ = { type:'principal', line:getLine(this._$) }; 
break;
case 163:
 this.$ = { type:'map', line:getLine(this._$), maptype:$$[$0-1] }; 
break;
case 164:
 this.$ = { type:'trait', itemtype:$$[$0-1], line:getLine(this._$) }; 
break;
case 170:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-3], errtype:$$[$0-1] }; 
break;
case 171:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-2] }; 
break;
case 172:
 this.$ = { type:'response', line:getLine(this._$),  errtype:$$[$0-1] }; 
break;
case 173: case 198:
 this.$ = {}; this.$[$$[$0-4]] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 174: case 199:
 this.$ = {}; this.$[$$[$0-4].val] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 175: case 200:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 176: case 201:
 this.$ = {}; this.$[$$[$0-2].val] = $$[$0]; 
break;
case 177: case 178:
 this.$ = {op:'lit', type:'principal', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 179: case 180: case 181:
 this.$ = {op:'lit', type:'uint', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 182:
 this.$ = {op:'lit', type:'bool', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 183:
 this.$ = {op:'lit', type:'none', line:getLine(this._$), subtype:'keyword', val:yytext }; 
break;
case 184:
 this.$={ op:'lit', type:'principal', line:getLine(this._$), val:$$[$0] }; 
break;
case 191:
 this.$ = {op:'lit', type:'string', line:getLine(this._$), size:BigInt(yytext.length-2), val:yytext.substring(1,yytext.length-1) }; 
break;
case 192:
 this.$ = { op:'lit', type:'int', line:getLine(this._$), val:BigInt(yytext)}; 
break;
case 193:
 this.$ = { op:'lit', type:'uint', line:getLine(this._$), val:BigInt(yytext.substring(1)) }; 
break;
case 194:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:true }; 
break;
case 195:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:false }; 
break;
case 196:
 var b=hexStringToBuffer(yytext.substr(2)); this.$ = { op:'lit', type:'buff', line:getLine(this._$), size:BigInt(b.length), val:b }; 
break;
case 197:
 this.$ = {op:'lit', type:'map', maptype:null, line:getLine(this._$), val:$$[$0-1]}; 
break;
case 202:
 this.$ = { op:'lit', type:'list', itemtype:null, line:getLine(this._$), size:BigInt($$[$0-1].length), val:$$[$0-1] }; 
break;
case 204:
 this.$ = [$$[$0]] 
break;
case 206:
 this.$=$$[$0]; this.$.val = $$[$0-1] + this.$.val; 
break;
case 208:
 this.$=$$[$0]; this.$.val = '.' + $$[$0-1] + this.$.val; 
break;
case 209:
 this.$ = { op:'lit', type:'principal', line:getLine(this._$), val:'.'+$$[$0] }; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,17:$V0,36:$V1,44:$V2,48:$V3,49:$V4,56:$V5,58:$V6,61:$V7,107:$V8},{1:[3]},{5:[1,20]},{1:[2,2]},{4:21,5:[2,4],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,17:$V0,36:$V1,44:$V2,48:$V3,49:$V4,56:$V5,58:$V6,61:$V7,107:$V8},{8:22,44:$V9},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{44:[2,105],57:[1,24]},{44:[2,106]},{18:[1,25]},{18:[1,26]},{37:[1,27]},{37:[1,28]},{50:[1,29]},{51:30,59:31,73:$Vb,133:$Vc,138:$Vd,146:33},{1:[2,1]},{5:[2,3]},o($Va,[2,5]),{18:[1,36]},{44:[2,104]},{27:[1,37]},{19:[1,38]},{18:[1,39]},{18:$Ve,28:40,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{38:[1,81],51:80,73:$Vb,133:$Vc,146:33},{18:[1,83],35:82},{19:[1,84]},{73:$Vb,146:85},o($VJ,[2,207]),o([16,19,27,40,42,45,47,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,96,97,103],[2,191]),{18:[1,86]},{45:[1,87]},{18:$Ve,28:88,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{20:89,21:90,22:91,23:92,24:93,29:[1,94],30:[1,95],34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{38:[1,111]},{16:[1,112],27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Vj1,[2,63]),o($Vj1,[2,64]),{18:[1,138]},{18:$Ve,28:139,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:140,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:141,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:142,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:143,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:144,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($Vj1,[2,94]),{45:[1,145]},{45:$Vk1},{45:$Vl1},{18:$Ve,28:148,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{45:[1,149]},{45:[1,150]},o($Vj1,[2,177]),o($Vj1,[2,178]),o($Vj1,[2,179]),o($Vj1,[2,180]),o($Vj1,[2,181]),o($Vj1,[2,182]),o($Vj1,[2,183]),o($Vj1,[2,184]),o($Vj1,[2,185]),o($Vj1,[2,186]),o($Vj1,[2,187]),o($Vj1,[2,188]),o($Vj1,[2,189]),o($Vj1,[2,190]),{45:$Vm1},{45:$Vn1},o($Vj1,[2,192]),o($Vj1,[2,193]),o($Vj1,[2,194]),o($Vj1,[2,195]),o($Vj1,[2,196]),{18:$Ve,28:154,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,72:$Vo1,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,145:153},{18:$Vp1,59:157,138:$Vd,144:155},{19:[1,159],38:[1,158]},{37:$Vq1,40:$Vr1,43:162,52:160,53:161,55:$Vs1,56:$Vt1},{59:166,138:$Vd},{138:[2,27]},{18:[1,167]},o($VJ,[2,206]),o($VJ,[2,209],{146:168,73:$Vb}),{18:$Vu1,47:$Vv1,108:169},{15:171,16:$Vw1,27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{16:[1,173]},{16:[1,174]},{16:[1,175]},{16:[1,176]},{18:$Vx1,25:[1,177],26:178},{18:$Vx1,26:180},{18:[1,182],31:181},{34:183,38:$VL,54:108,101:$VM,109:$VO,110:$VP,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},o($Vy1,[2,147]),o($Vy1,[2,148]),{89:[1,184]},{89:[1,185]},o($Vy1,$Vz1),o($Vy1,$VA1),{71:[1,186]},o($Vy1,[2,158]),{71:[1,187]},{71:[1,188]},o($Vy1,$VB1),o($Vy1,[2,162]),{18:$VC1,59:191,123:189,138:$Vd},{89:[1,192]},{39:193,40:$VD1,41:194,43:195,56:$Vt1},o($Va,[2,33]),{18:$Ve,28:196,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:[1,197]},{18:$Ve,28:198,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:199,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:200,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:201,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:202,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:203,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:204,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:205,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:206,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:207,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:208,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:209,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:210,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:211,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:212,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:213,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:214,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:215,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:216,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:217,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:218,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:219,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:223,34:245,38:$VE1,45:$Vg,47:$VF1,54:108,59:65,70:41,71:$Vh,73:$Vi,74:$VG1,75:$VH1,76:$VI1,77:$VJ1,78:$VK1,79:$VL1,80:$VM1,81:$VN1,82:$VO1,83:$VP1,84:$VQ1,85:$VR1,86:$VS1,87:$VT1,88:$VU1,90:$VV1,92:$VW1,93:$VX1,94:$VY1,95:$Vn,98:50,99:$Vo,101:$VZ1,102:$V_1,104:$Vr,105:$Vs,106:$Vt,109:$V$1,110:$V02,111:220,112:221,113:222,114:$V12,117:$VQ,118:66,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($Vj1,[2,67]),{27:$VW,45:$VX,47:[1,250],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($V22,[2,69],{45:$VX,71:$VY,73:$VZ,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41}),o($V22,[2,70],{45:$VX,71:$VY,73:$VZ,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41}),o($V32,[2,77],{45:$VX,71:$VY,73:$VZ}),o($V32,[2,91],{45:$VX,71:$VY,73:$VZ}),o($V32,[2,92],{45:$VX,71:$VY,73:$VZ}),{18:$Ve,28:251,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:252,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:253,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($V32,[2,101],{45:$VX,71:$VY,73:$VZ}),{18:[1,254]},{18:[1,255]},{18:$Ve,28:256,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:257,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{72:[1,258]},{27:$VW,42:[1,259],45:$VX,71:$VY,72:[2,204],73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{40:[1,260]},{97:[1,261]},{97:[1,262]},{37:$Vq1,40:$Vr1,43:162,52:263,53:161,55:$Vs1,56:$Vt1},{18:[1,264]},{40:[1,265]},{40:[2,38],42:[1,266]},{44:[1,267]},{18:[1,268]},{37:[1,269]},{44:[2,43],57:[1,270]},{19:[1,271]},{16:[1,272]},o($VJ,[2,208]),{47:[1,273]},{24:274,34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},o([5,17,18,36,38,44,45,48,49,56,58,61,65,68,71,73,74,75,80,94,95,99,101,102,104,105,106,107,109,110,126,127,128,129,130,131,132,133,138,139,140,141,142,143],[2,49],{16:$V42}),o($V52,[2,13]),o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,16]),o($Va,[2,17]),{24:276,34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{18:[1,277]},{18:[2,24]},{18:[1,278]},{18:[1,280],32:279},{18:[2,25]},o($Vy1,[2,146]),{18:[1,282],73:[1,284],101:[1,283],124:281},{24:285,34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{118:286,139:$VE,140:$VF},{118:287,139:$VE,140:$VF},{118:288,139:$VE,140:$VF},{40:[1,289]},{97:[1,290]},{97:[1,291]},{24:292,34:98,37:$VK,38:$VL,42:[1,293],54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{40:[1,294]},{40:[2,30],42:[1,295]},{44:[1,296]},{27:$VW,45:$VX,71:$VY,72:[1,297],73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Vj1,[2,66]),o($V22,[2,71],{45:$VX,71:$VY,73:$VZ,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41}),o($V22,[2,72],{45:$VX,71:$VY,73:$VZ,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41}),o($V32,[2,73],{45:$VX,71:$VY,73:$VZ}),o($V32,[2,74],{45:$VX,71:$VY,73:$VZ}),o($V32,[2,75],{45:$VX,71:$VY,73:$VZ}),o($V32,[2,76],{45:$VX,71:$VY,73:$VZ}),o($V32,[2,78],{45:$VX,71:$VY,73:$VZ}),o([16,27,40,42,47,72,82,83,92,93,96,97,103],[2,79],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1}),o([16,27,40,42,47,72,83,92,93,96,97,103],[2,80],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1}),o($V62,[2,81],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41}),o($V62,[2,82],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41}),o($V72,[2,83],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,84:$V71,85:$V81}),o($V72,[2,84],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,84:$V71,85:$V81}),o($V72,[2,85],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,84:$V71,85:$V81}),o($V72,[2,86],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,84:$V71,85:$V81}),o($V82,[2,87],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1}),o($V82,[2,88],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1}),o([16,27,40,42,47,72,92,93,96,97,103],[2,89],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1}),o([16,27,40,42,47,72,93,96,97,103],[2,90],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1}),{27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,97:[1,298],103:$Vi1},o($V92,[2,99],{27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1}),o($V92,[2,100],{27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1}),{47:[1,299]},{42:[1,300],47:[2,118]},{42:[1,301],47:[2,119]},{27:$VW,42:[1,302],45:$VX,47:[2,120],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Va2,[2,122],{70:41,98:50,59:65,118:66,134:67,135:68,136:69,137:70,28:141,18:$Ve,38:$Vf,45:$Vg,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI}),o($Va2,[2,123],{70:41,98:50,59:65,118:66,134:67,135:68,136:69,137:70,28:140,18:$Ve,38:$Vf,45:$Vg,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI}),o($Va2,[2,124]),o($Va2,[2,125]),o($Va2,[2,126]),o($Va2,[2,127]),o($Va2,[2,128]),o($Va2,[2,129],{70:41,98:50,59:65,118:66,134:67,135:68,136:69,137:70,28:142,18:$Ve,38:$Vf,45:$Vg,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI}),o($Va2,[2,130]),o($Va2,[2,131]),o($Va2,[2,132]),o($Va2,[2,133]),o($Va2,[2,134]),o($Va2,[2,135]),o($Va2,[2,136]),o($Va2,[2,137]),o($Va2,[2,138]),o($Va2,[2,139]),o($Va2,[2,140]),o($Va2,[2,141],{70:41,98:50,59:65,118:66,134:67,135:68,136:69,137:70,28:143,18:$Ve,38:$Vf,45:$Vg,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI}),{34:303,38:$VL,45:$Vl1,54:108,101:$VM,109:$VO,110:$VP,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},o($Va2,[2,150]),o($Vb2,$VB1,{45:$Vk1}),o($Vb2,$Vz1,{45:$Vm1}),o($Vb2,$VA1,{45:$Vn1}),{18:[1,304],59:305,123:189,138:$Vd,144:155},o($Vj1,[2,68]),{27:$VW,42:[1,306],45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{27:$VW,45:$VX,47:[1,307],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{27:$VW,45:$VX,47:[1,308],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{47:[1,309]},{47:[1,310]},{27:$VW,45:$VX,47:[1,311],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{27:$VW,45:$VX,47:[1,312],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Vj1,[2,202]),{18:$Ve,28:154,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,72:$Vo1,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,145:313},o($Vj1,[2,197]),{18:$Ve,28:314,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:315,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{40:[1,316]},{38:[1,317]},{16:[1,318]},{37:$Vq1,40:$Vr1,43:162,52:319,53:161,55:$Vs1,56:$Vt1},{18:[1,320]},{38:[1,321]},{51:322,73:$Vb,133:$Vc,146:33},{44:[2,44]},{18:[1,323]},o($Va,[2,46]),{38:[1,324]},{42:[1,325],47:[2,110]},o($V52,[2,12]),{16:[2,18]},{27:[1,326]},{16:[2,20],27:[1,327]},{33:328,34:329,38:$VL,54:108,101:$VM,109:$VO,110:$VP,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},o([38,101,109,110,117,119,120,121,122,125],[2,26]),{71:[1,331],73:[1,332],88:[1,330]},o($Vc2,[2,165]),{45:[1,333]},{18:[1,334]},{88:[1,335]},{72:[1,336]},{72:[1,337]},{72:[1,338]},o($Vy1,[2,163]),{24:339,34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{24:340,34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{42:[1,341]},{24:342,34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{16:[1,343]},{39:344,40:$VD1,41:194,43:195,56:$Vt1},{18:[1,345]},o($Vj1,[2,65]),{18:$Ve,28:346,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($Vj1,[2,114]),{18:$Ve,28:223,34:245,38:$VE1,45:$Vg,47:$VF1,54:108,59:65,70:41,71:$Vh,73:$Vi,74:$VG1,75:$VH1,76:$VI1,77:$VJ1,78:$VK1,79:$VL1,80:$VM1,81:$VN1,82:$VO1,83:$VP1,84:$VQ1,85:$VR1,86:$VS1,87:$VT1,88:$VU1,90:$VV1,92:$VW1,93:$VX1,94:$VY1,95:$Vn,98:50,99:$Vo,101:$VZ1,102:$V_1,104:$Vr,105:$Vs,106:$Vt,109:$V$1,110:$V02,111:347,112:221,113:222,114:$V12,117:$VQ,118:66,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:223,34:245,38:$VE1,45:$Vg,47:$VF1,54:108,59:65,70:41,71:$Vh,73:$Vi,74:$VG1,75:$VH1,76:$VI1,77:$VJ1,78:$VK1,79:$VL1,80:$VM1,81:$VN1,82:$VO1,83:$VP1,84:$VQ1,85:$VR1,86:$VS1,87:$VT1,88:$VU1,90:$VV1,92:$VW1,93:$VX1,94:$VY1,95:$Vn,98:50,99:$Vo,101:$VZ1,102:$V_1,104:$Vr,105:$Vs,106:$Vt,109:$V$1,110:$V02,111:348,112:221,113:222,114:$V12,117:$VQ,118:66,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:223,34:245,38:$VE1,45:$Vg,47:$VF1,54:108,59:65,70:41,71:$Vh,73:$Vi,74:$VG1,75:$VH1,76:$VI1,77:$VJ1,78:$VK1,79:$VL1,80:$VM1,81:$VN1,82:$VO1,83:$VP1,84:$VQ1,85:$VR1,86:$VS1,87:$VT1,88:$VU1,90:$VV1,92:$VW1,93:$VX1,94:$VY1,95:$Vn,98:50,99:$Vo,101:$VZ1,102:$V_1,104:$Vr,105:$Vs,106:$Vt,109:$V$1,110:$V02,111:349,112:221,113:222,114:$V12,117:$VQ,118:66,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($Va2,[2,149]),{97:[1,350]},{97:[1,351]},{18:[1,353],45:[1,354],100:352},o($Vj1,[2,97]),o($Vj1,[2,98]),o($Vj1,[2,102]),o($Vj1,[2,103]),o($Vj1,[2,112]),o($Vj1,[2,113]),{72:[2,203]},{27:$VW,40:[2,200],42:[1,355],45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{27:$VW,40:[2,201],42:[1,356],45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{16:[1,357]},{37:$Vq1,40:$Vr1,43:162,52:358,53:161,55:$Vs1,56:$Vt1},o($Va,[2,36]),{40:[2,37]},{45:[1,359]},{39:360,40:$VD1,41:194,43:195,56:$Vt1},o($Vd2,[2,42]),{16:[1,361]},o($Ve2,$Vf2,{62:362,60:363,9:364,61:$V7}),{18:$Vu1,47:$Vv1,108:365},{18:$Ve,28:366,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:367,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{16:[2,22]},{16:[2,23]},o($Vy1,[2,164]),{18:$Ve,28:368,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:[1,369]},{18:$Ve,28:370,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($Vc2,[2,169]),{71:[1,371]},o($Vy1,[2,157]),o($Vy1,[2,159]),o($Vy1,[2,160]),{40:[2,175],42:[1,372]},{40:[2,176],42:[1,373]},{24:374,34:98,37:$VK,38:$VL,54:108,88:[1,375],101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{88:[1,376]},o($Va,[2,28]),{40:[2,29]},{45:[1,377]},o([16,27,40,42,47,72,97,103],[2,93],{45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1}),{47:[2,115]},{47:[2,116]},{47:[2,117]},{18:$Ve,24:339,28:314,34:98,37:$VK,38:$VE1,45:$Vg,54:108,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$VZ1,102:$Vg2,104:$Vr,105:$Vs,106:$Vt,109:$V$1,110:$V02,116:97,117:$VQ,118:66,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,24:340,28:315,34:98,37:$VK,38:$VE1,45:$Vg,54:108,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$VZ1,102:$Vg2,104:$Vr,105:$Vs,106:$Vt,109:$V$1,110:$V02,116:97,117:$VQ,118:66,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{47:[1,379]},{47:[1,380]},{18:$Vh2,47:$Vi2,115:381},{18:$Vp1,59:157,138:$Vd,144:383},{18:$Vp1,59:157,138:$Vd,144:384},o($Va,[2,34]),{40:[1,385]},{24:387,34:98,37:$VK,38:$VL,46:386,47:$Vj2,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{40:[1,388]},o($Va,[2,45]),{40:[1,389]},{8:394,18:$Ve,28:392,38:$Vf,44:$V9,45:$Vg,59:65,63:390,64:391,65:$Vk2,68:$Vl2,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($Ve2,$Vf2,{9:364,60:396,61:$V7}),{47:[2,109]},{16:[2,19],27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{16:[2,21],27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{27:$VW,45:$VX,71:$VY,72:[1,397],73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Vc2,[2,168]),{27:$VW,45:$VX,47:[1,398],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{118:399,139:$VE,140:$VF},{18:$VC1,59:191,123:400,138:$Vd},{18:$VC1,59:191,123:401,138:$Vd},{88:[1,402]},o($Vy1,[2,171]),o($Vy1,[2,172]),{24:387,34:98,37:$VK,38:$VL,46:403,47:$Vj2,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{34:183,38:$VL,45:$Vl1,54:108,101:$VM,109:$VO,110:$VP,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},o($Vj1,[2,95]),o($Vj1,[2,96]),{47:[1,404]},{42:[1,405],47:[2,144]},{40:[2,198]},{40:[2,199]},{16:[1,406]},{47:[1,407]},{42:[1,408],47:[2,152]},o($Vd2,[2,41]),o([5,17,18,36,38,40,44,45,48,49,56,58,61,65,68,71,73,74,75,80,94,95,99,101,102,104,105,106,107,109,110,126,127,128,129,130,131,132,133,138,139,140,141,142,143],[2,108]),{40:[2,50]},{8:394,18:$Ve,28:392,38:$Vf,40:[2,52],44:$V9,45:$Vg,59:65,63:409,64:391,65:$Vk2,68:$Vl2,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{15:410,16:$Vw1,27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{45:[1,411]},o($Vm2,[2,57]),{18:$Ve,28:412,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},o($Ve2,[2,47]),o($Vc2,[2,167]),o($Vc2,[2,166]),{72:[1,413]},{40:[2,173]},{40:[2,174]},o($Vy1,[2,170]),{47:[1,414]},{25:[1,415]},{18:$Vh2,47:$Vi2,115:416},o($Va,[2,35]),{25:[1,417]},{24:387,34:98,37:$VK,38:$VL,46:418,47:$Vj2,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},{40:[2,51]},{8:394,16:$V42,18:$Ve,28:392,38:$Vf,40:[2,54],44:$V9,45:$Vg,59:65,63:419,64:391,65:$Vk2,68:$Vl2,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{18:$Ve,28:420,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{15:421,16:$Vw1,27:$VW,45:$VX,71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Vy1,[2,154]),{25:[1,422]},{38:[1,423]},{47:[2,143]},{54:424,125:$VV},{47:[2,151]},{40:[2,53]},{27:$VW,45:$VX,47:[1,425],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Vm2,[2,58],{16:$V42}),{24:426,34:98,37:$VK,38:$VL,54:108,101:$VM,102:$VN,109:$VO,110:$VP,116:97,117:$VQ,119:$VR,120:$VS,121:$VT,122:$VU,125:$VV},o($Ve2,$Vf2,{60:363,9:364,62:427,61:$V7}),o($Vd2,[2,40]),{38:[1,428]},o($Vd2,[2,32]),{40:[1,429]},o($Ve2,$Vf2,{60:363,9:364,62:430,61:$V7}),{47:[2,142]},{40:[1,431]},o($Vm2,$Vn2,{66:432,67:433,69:[1,434]}),o($Vm2,$Vn2,{67:435,69:[1,436]}),o($Vm2,[2,56]),{38:$Vo2,65:[1,437]},o($Vm2,[2,55]),{38:$Vo2,65:[1,439]},{45:[1,440]},o($Ve2,$Vf2,{60:363,9:364,62:441,61:$V7}),{45:[1,442]},{18:$Ve,28:443,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{40:[1,444]},{18:$Ve,28:445,38:$Vf,45:$Vg,59:65,70:41,71:$Vh,73:$Vi,74:$Vj,75:$Vk,80:$Vl,94:$Vm,95:$Vn,98:50,99:$Vo,101:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,109:$Vu,110:$Vv,118:66,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:$VC,133:$VD,134:67,135:68,136:69,137:70,138:$Vd,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI},{27:$VW,45:$VX,47:[1,446],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},o($Vm2,[2,61]),{27:$VW,45:$VX,47:[1,447],71:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11,78:$V21,79:$V31,81:$V41,82:$V51,83:$V61,84:$V71,85:$V81,86:$V91,87:$Va1,88:$Vb1,89:$Vc1,90:$Vd1,91:$Ve1,92:$Vf1,93:$Vg1,96:$Vh1,103:$Vi1},{38:[1,448]},{38:[1,449]},o($Ve2,$Vf2,{60:363,9:364,62:450,61:$V7}),o($Ve2,$Vf2,{60:363,9:364,62:451,61:$V7}),{40:[1,452]},{40:[1,453]},o($Vp2,[2,60]),o($Vp2,[2,59])],
defaultActions: {3:[2,2],13:[2,106],20:[2,1],21:[2,3],24:[2,104],83:[2,27],179:[2,24],182:[2,25],270:[2,44],276:[2,18],313:[2,203],319:[2,37],328:[2,22],329:[2,23],344:[2,29],347:[2,115],348:[2,116],349:[2,117],365:[2,109],383:[2,198],384:[2,199],390:[2,50],400:[2,173],401:[2,174],409:[2,51],416:[2,143],418:[2,151],419:[2,53],429:[2,142]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function prependChild(node, child){
        node.unshift(child);
        return node;
    }
    function getLine(v) {
        if (typeof v == 'number') return v;
        return v.first_line;
    }
    function parseError(yy, opts) {
        var expected = opts.expected ? `Expecting ${opts.expected}` : '';
        yy.parser.parseError(`Parse error on line ${opts.line}:\n${yy.lexer.showPosition()}\n${expected}`, {});
    }
    function expectText(yy, lineno, desired, actual) {
        if (desired == actual) return;
        parseError(yy, {
             line: lineno,
             expected:`'${desired}' not '${actual}'`
        });
    }
    function hexStringToBuffer(str) {
        if (str.length % 2 == 1) str='0'+str;
        return Buffer.from(str,'hex');
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 58;
break;
case 2:return 61;
break;
case 3:return 107;
break;
case 4:return 56;
break;
case 5:return 57;
break;
case 6:return 44;
break;
case 7:return 17;
break;
case 8:return 49;
break;
case 9:return 50;
break;
case 10:return 36;
break;
case 11:return 'USE';
break;
case 12:return 19;
break;
case 13:return 37;
break;
case 14:return 48;
break;
case 15:return 55;
break;
case 16:return 29;
break;
case 17:return 30;
break;
case 18:return 65;
break;
case 19:return 69;
break;
case 20:return 68;
break;
case 21:return 99;
break;
case 22:return 105;
break;
case 23:return 106;
break;
case 24:return 117;
break;
case 25:return 109;
break;
case 26:return 110;
break;
case 27:return 120;
break;
case 28:return 122;
break;
case 29:return 121;
break;
case 30:return 121;
break;
case 31:return 101;
break;
case 32:return 125;
break;
case 33:return 119;
break;
case 34:return 102;
break;
case 35:return 104;
break;
case 36:return 141;
break;
case 37:return 142;
break;
case 38:return 132;
break;
case 39:return 126;
break;
case 40:return 127;
break;
case 41:return 128;
break;
case 42:return 129;
break;
case 43:return 130;
break;
case 44:return 131;
break;
case 45:return 139;
break;
case 46:return 140;
break;
case 47:return 143;
break;
case 48:return 133;
break;
case 49:return 18;
break;
case 50:return 138;
break;
case 51:return 75;
break;
case 52:return 74;
break;
case 53:return 76;
break;
case 54:return 77;
break;
case 55:return 78;
break;
case 56:return 79;
break;
case 57:return 81;
break;
case 58:return 80;
break;
case 59:return 82;
break;
case 60:return 83;
break;
case 61:return 84;
break;
case 62:return 85;
break;
case 63:return 86;
break;
case 64:return 87;
break;
case 65:return 88;
break;
case 66:return 89;
break;
case 67:return 90;
break;
case 68:return 91;
break;
case 69:return 103;
break;
case 70:return 27;
break;
case 71:return 92;
break;
case 72:return 93;
break;
case 73:return 94;
break;
case 74:return 95;
break;
case 75:return 73;
break;
case 76:return 97;
break;
case 77:return 16;
break;
case 78:return 42;
break;
case 79:return 45;
break;
case 80:return 47;
break;
case 81:return 38;
break;
case 82:return 40;
break;
case 83:return 71;
break;
case 84:return 72;
break;
case 85:return 96;
break;
case 86:return 25;
break;
case 87:/* skip whitespace */
break;
case 88:return 'UNKNOWN';
break;
case 89:return 5;
break;
case 90:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:import)/,/^(?:const)/,/^(?:private)/,/^(?:public)/,/^(?:readonly)/,/^(?:function)/,/^(?:persist)/,/^(?:declare)/,/^(?:extern)/,/^(?:define)/,/^(?:use)/,/^(?:as)/,/^(?:trait)/,/^(?:implement)/,/^(?:implements)/,/^(?:fungible-token)/,/^(?:nonfungible-token)/,/^(?:if)/,/^(?:else)/,/^(?:return)/,/^(?:foreach)/,/^(?:_countof)/,/^(?:_typeof)/,/^(?:list)/,/^(?:int)/,/^(?:uint)/,/^(?:bool)/,/^(?:string-ascii)/,/^(?:string-utf8)/,/^(?:string)/,/^(?:principal)/,/^(?:response)/,/^(?:buff)/,/^(?:optional)/,/^(?:delete)/,/^(?:true)/,/^(?:false)/,/^(?:none)/,/^(?:contract-caller)/,/^(?:tx-sender)/,/^(?:block-height)/,/^(?:burn-block-height)/,/^(?:stx-liquid-supply)/,/^(?:is-in-regtest)/,/^(?:([0-9])+)/,/^(?:u([0-9])+)/,/^(?:0x([0-9A-Fa-f])*)/,/^(?:([S][A-Z0-9]{39,40}))/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*[!?]{0,1}))/,/^(?:("(?:[^"\\]|\\.)*"))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\*\*)/,/^(?:\^)/,/^(?:~)/,/^(?:&)/,/^(?:\|)/,/^(?:<<)/,/^(?:>>)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\?=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:#)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:=>)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crystalAst;
exports.Parser = crystalAst.Parser;
exports.parse = function () { return crystalAst.parse.apply(crystalAst, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}