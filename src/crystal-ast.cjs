/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crystalAst = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[2,101],$V3=[1,17],$V4=[1,18],$V5=[1,12],$V6=[1,19],$V7=[1,14],$V8=[1,13],$V9=[1,23],$Va=[5,15,41,49,53,54,61,63,66,104],$Vb=[1,33],$Vc=[1,31],$Vd=[1,40],$Ve=[1,67],$Vf=[1,68],$Vg=[1,75],$Vh=[1,76],$Vi=[1,42],$Vj=[1,41],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[16,17,43,45,47],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[1,101],$VM=[1,95],$VN=[1,104],$VO=[1,102],$VP=[1,92],$VQ=[1,96],$VR=[1,100],$VS=[1,105],$VT=[1,126],$VU=[1,108],$VV=[1,128],$VW=[1,109],$VX=[1,111],$VY=[1,110],$VZ=[1,112],$V_=[1,113],$V$=[1,114],$V01=[1,115],$V11=[1,116],$V21=[1,117],$V31=[1,118],$V41=[1,119],$V51=[1,120],$V61=[1,121],$V71=[1,122],$V81=[1,123],$V91=[1,124],$Va1=[1,125],$Vb1=[1,127],$Vc1=[19,26,36,38,45,47,50,52,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,101],$Vd1=[2,185],$Ve1=[1,145],$Vf1=[1,151],$Vg1=[2,40],$Vh1=[1,152],$Vi1=[1,153],$Vj1=[1,157],$Vk1=[2,105],$Vl1=[1,165],$Vm1=[16,19,24,45,47,52,86],$Vn1=[1,175],$Vo1=[2,32],$Vp1=[2,113],$Vq1=[1,204],$Vr1=[1,203],$Vs1=[1,205],$Vt1=[1,206],$Vu1=[1,207],$Vv1=[1,208],$Vw1=[1,209],$Vx1=[1,210],$Vy1=[1,211],$Vz1=[1,212],$VA1=[1,214],$VB1=[1,215],$VC1=[1,216],$VD1=[1,217],$VE1=[1,213],$VF1=[19,26,38,45,47,52,77,78,84,85,86,87,88,89,90,91,94,95,101],$VG1=[19,26,38,45,47,52,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,101],$VH1=[19,26,38,45,47,52,84,85,86,87,88,89,90,91,94,95,101],$VI1=[19,26,38,45,47,52,88,89,90,91,94,95,101],$VJ1=[19,38,45,47,52,95],$VK1=[47,52],$VL1=[36,76,86],$VM1=[45,47],$VN1=[16,33,34,36,43,49,50,70,73,76,77,78,92,93,97,99,100,102,103,117,118,119,120,121,122,123,124,129,130,131,132,133,134],$VO1=[2,48],$VP1=[1,335],$VQ1=[2,132],$VR1=[2,138],$VS1=[1,345],$VT1=[1,347],$VU1=[16,33,34,36,43,45,49,50,70,73,76,77,78,92,93,97,99,100,102,103,117,118,119,120,121,122,123,124,129,130,131,132,133,134],$VV1=[2,62],$VW1=[1,393],$VX1=[16,33,34,36,43,45,49,50,70,73,74,76,77,78,92,93,97,99,100,102,103,117,118,119,120,121,122,123,124,129,130,131,132,133,134];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"prog":3,"definitions":4,"ENDOFFILE":5,"definition":6,"visibility":7,"func_def":8,"const":9,"persist":10,"define_trait":11,"implement_trait":12,"declare_extern":13,"import_file":14,"PERSIST":15,"ID":16,"AS":17,"persist_map_def":18,"SEMICOLON":19,"persist_var_def":20,"persist_fungible_token_def":21,"persist_nonfungible_token_def":22,"type":23,"ARROW":24,"txt_with":25,"ASSIGNMENT":26,"expr":27,"FUNGIBLE_TOKEN":28,"NONFUNGIBLE_TOKEN":29,"txt_identified":30,"txt_by":31,"asset_id_type":32,"INT":33,"UINT":34,"BUFF":35,"LBRACKET":36,"int_literal":37,"RBRACKET":38,"STRING":39,"txt_from":40,"DEFINE":41,"TRAIT":42,"LBRACE":43,"trait_items":44,"RBRACE":45,"trait_item":46,"COMMA":47,"public_visibility":48,"FUNCTION":49,"LPAREN":50,"type_list":51,"RPAREN":52,"IMPLEMENT":53,"DECLARE":54,"EXTERN":55,"contract_id":56,"extern_contract_defs":57,"extern_contract_def":58,"response_type":59,"IMPLEMENTS":60,"PUBLIC":61,"READONLY":62,"IMPORT":63,"string_literal":64,"consts":65,"CONST":66,"consts_then_stmts":67,"stmts":68,"stmt":69,"IF":70,"elseif":71,"else":72,"RETURN":73,"ELSE":74,"literal":75,"DOT":76,"MINUS":77,"PLUS":78,"MULTIPLY":79,"DIVIDE":80,"MOD":81,"POW":82,"XOR":83,"GTE":84,"LTE":85,"GT":86,"LT":87,"EQUALS":88,"NOTEQUALS":89,"AND":90,"OR":91,"NOT":92,"UNWRAP":93,"EXPR_IF":94,"COLON":95,"func_call":96,"FOREACH":97,"anon_func_def":98,"PRINCIPAL":99,"OPTIONAL":100,"INSERT_ASSIGNMENT":101,"DELETE":102,"COUNTOF":103,"PRIVATE":104,"func_args_def":105,"func_args":106,"operator":107,"LE":108,"anon_func_args_def":109,"actual_type":110,"trait_type":111,"LIST":112,"BOOL":113,"mapkeysdef":114,"trait_itemtype":115,"RESPONSE":116,"CONTRACT-CALLER":117,"TX-SENDER":118,"BLOCK-HEIGHT":119,"BURN-BLOCK-HEIGHT":120,"STX-LIQUID-SUPPLY":121,"IS-IN-REGTEST":122,"NONE":123,"STX_ADDRESS":124,"bool_literal":125,"buff_literal":126,"list_literal":127,"map_literal":128,"QUOTED-STRING":129,"INT_LITERAL":130,"UINT_LITERAL":131,"TRUE":132,"FALSE":133,"HEX_NUMBER":134,"map_literal_vals":135,"list_literal_vals":136,"contract_id_relative":137,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",15:"PERSIST",16:"ID",17:"AS",19:"SEMICOLON",24:"ARROW",26:"ASSIGNMENT",28:"FUNGIBLE_TOKEN",29:"NONFUNGIBLE_TOKEN",33:"INT",34:"UINT",35:"BUFF",36:"LBRACKET",38:"RBRACKET",39:"STRING",41:"DEFINE",42:"TRAIT",43:"LBRACE",45:"RBRACE",47:"COMMA",49:"FUNCTION",50:"LPAREN",52:"RPAREN",53:"IMPLEMENT",54:"DECLARE",55:"EXTERN",60:"IMPLEMENTS",61:"PUBLIC",62:"READONLY",63:"IMPORT",66:"CONST",70:"IF",73:"RETURN",74:"ELSE",76:"DOT",77:"MINUS",78:"PLUS",79:"MULTIPLY",80:"DIVIDE",81:"MOD",82:"POW",83:"XOR",84:"GTE",85:"LTE",86:"GT",87:"LT",88:"EQUALS",89:"NOTEQUALS",90:"AND",91:"OR",92:"NOT",93:"UNWRAP",94:"EXPR_IF",95:"COLON",97:"FOREACH",99:"PRINCIPAL",100:"OPTIONAL",101:"INSERT_ASSIGNMENT",102:"DELETE",103:"COUNTOF",104:"PRIVATE",108:"LE",112:"LIST",113:"BOOL",116:"RESPONSE",117:"CONTRACT-CALLER",118:"TX-SENDER",119:"BLOCK-HEIGHT",120:"BURN-BLOCK-HEIGHT",121:"STX-LIQUID-SUPPLY",122:"IS-IN-REGTEST",123:"NONE",124:"STX_ADDRESS",129:"QUOTED-STRING",130:"INT_LITERAL",131:"UINT_LITERAL",132:"TRUE",133:"FALSE",134:"HEX_NUMBER"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,5],[10,5],[10,5],[10,5],[18,3],[20,5],[21,3],[21,5],[22,4],[32,1],[32,1],[32,4],[32,4],[25,1],[30,1],[31,1],[40,1],[11,7],[44,3],[44,1],[44,0],[46,8],[12,4],[13,7],[13,9],[13,6],[57,3],[57,1],[57,0],[58,8],[58,5],[58,3],[48,1],[48,2],[14,7],[65,2],[65,0],[9,5],[67,2],[68,2],[68,1],[68,3],[68,2],[69,9],[69,8],[69,1],[69,3],[71,9],[71,8],[72,4],[72,0],[27,1],[27,1],[27,4],[27,3],[27,2],[27,3],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,5],[27,1],[27,6],[27,6],[27,4],[27,4],[27,3],[27,3],[27,2],[27,4],[7,2],[7,1],[7,1],[7,0],[8,8],[105,4],[105,2],[105,0],[96,4],[96,4],[96,4],[106,3],[106,3],[106,1],[106,1],[106,0],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[98,7],[109,3],[109,1],[109,0],[23,2],[23,1],[23,1],[51,3],[51,1],[51,0],[110,7],[110,1],[110,1],[110,4],[110,1],[110,4],[110,1],[110,1],[110,3],[111,4],[115,1],[115,4],[115,4],[115,3],[115,2],[59,6],[59,5],[59,5],[114,5],[114,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[64,1],[37,1],[37,1],[125,1],[125,1],[126,1],[128,3],[135,5],[135,3],[127,3],[136,3],[136,1],[136,0],[56,2],[56,1],[137,3],[137,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return []; 
break;
case 3:
 this.$ = prependChild($$[$0],$$[$0-1]); 
break;
case 4: case 112:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; this.$.vis = $$[$0-1]; 
break;
case 12:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datamap', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 13:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datavar', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 14:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'ft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 15:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'nft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 16:
 this.$ = { type:'datamap', keytype:$$[$0-2], valtype:$$[$0], line:getLine(this._$) }; 
break;
case 17:
 expectText(yy, yylineno, 'initial-value', $$[$0-2]); this.$ = {  initial_val:$$[$0], line:getLine(this._$) }; Object.assign(this.$, $$[$0-4]); 
break;
case 18:
 expectText(yy, yylineno, 'unlimited-supply', $$[$0]); this.$ = {  type:'ft', total_supply:null, line:getLine(this._$) }; 
break;
case 19:
 expectText(yy, yylineno, 'total-supply', $$[$0-2]); this.$ = {  type:'ft', total_supply:$$[$0], line:getLine(this._$) }; 
break;
case 20:
 this.$ = { type:'nft', tokenidtype: $$[$0], line:getLine(this._$) }; 
break;
case 21: case 140:
 this.$ = { type:'int', line:getLine(this._$) }; 
break;
case 22: case 141:
 this.$ = { type:'uint', line:getLine(this._$) }; 
break;
case 23: case 142:
 this.$ = { type:'buff', line:getLine(this._$), size:$$[$0-1].val }; 
break;
case 24:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) parserError(yy, {line:yylineno, expected:'positive integer for index'}); 
break;
case 25:
 expectText(yy, yylineno, 'with', $$[$0]); 
break;
case 26:
 expectText(yy, yylineno, 'identified', $$[$0]); 
break;
case 27:
 expectText(yy, yylineno, 'by', $$[$0]); 
break;
case 28:
 expectText(yy, yylineno, 'from', $$[$0]); 
break;
case 29:
 this.$= { op:'trait_def', id:$$[$0-4], traits:$$[$0-2], line:getLine(this._$) }; 
break;
case 30: case 38:
 this.$=prependChild($$[$0], $$[$0-2]); 
break;
case 31: case 39:
 this.$=[$$[$0]]; 
break;
case 32: case 40: case 48:
 this.$=[]; 
break;
case 33:
 this.$={op:'extern_func_def', vis:$$[$0-7], name:$$[$0-5], args:$$[$0-3] }; Object.assign(this.$, $$[$0]); 
break;
case 34:
 this.$={ op:'impl_trait', expr:$$[$0-1], line:getLine(this._$) }; 
break;
case 35:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:$$[$0-4], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 36:
 this.$={ op:'declare_extern', type:'extern_decl', id:$$[$0-4], protect:'const', access:'contract', contract_id:$$[$0-6], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 37:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:null, defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 41:
 this.$=Object.assign({ op:'extern_func_def', name:$$[$0-5], vis:$$[$0-7], args:$$[$0-3], contract_id:null, line:getLine(this._$) }, $$[$0]); 
break;
case 42:
 this.$={ op:'extern_trait_def', id:$$[$0-3], traits:$$[$0-1], contract_id:null }; 
break;
case 43:
 this.$={ op:'extern_trait_def_impl', impl_contract_id:$$[$0], contract_id:null }; 
break;
case 45:
 this.$='read-only' 
break;
case 46:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:$$[$0-5], as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 47:
 this.$=prependChild($$[$0], $$[$0-1]); 
break;
case 49:
 this.$ = { op:'vardecl', id:$$[$0-3], protect:'const', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 50:
 this.$ = $$[$0-1]; this.$.push.apply(this.$, $$[$0]); 
break;
case 51:
 this.$ = prependChild($$[$0], $$[$0-1]); 
break;
case 52: case 137:
 this.$ = [ $$[$0] ]; 
break;
case 53: case 110: case 136: case 183:
 this.$ = prependChild($$[$0], $$[$0-2]); 
break;
case 54:
 this.$ = [ $$[$0-1] ]; 
break;
case 55:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-6], body:$$[$0-3], elsif:$$[$0-1], else_body: $$[$0] }; 
break;
case 56:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-5], body:$$[$0-2], else_body: $$[$0] }; 
break;
case 57:
 this.$ = $$[$0]; this.$.vis='private'; 
break;
case 58:
 this.$ = { op:'return', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 59:
 this.$ = $$[$0-8]; this.$.push({ expr:$$[$0-4], body:$$[$0-1]}); 
break;
case 60:
 this.$ = [{ expr:$$[$0-4], body:$$[$0-1] }]; 
break;
case 61: case 68:
 this.$ = $$[$0-1]; 
break;
case 62:
 this.$ = null; 
break;
case 64: case 149:
 this.$={ op:'id', type:null, line:getLine(this._$), id:$$[$0] }; 
break;
case 65: case 151:
 this.$ = { op:'[]', type:null, line:getLine(this._$), expr:$$[$0-3], bracket:$$[$0-1] }; 
break;
case 66: case 152:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:$$[$0-2] }; 
break;
case 67: case 153:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:null }; 
break;
case 69:
 this.$ = { op:'sign-', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 70:
 this.$ = { op:'sign+', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 71: case 72: case 73: case 74: case 84: case 85:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), multi:[$$[$0-2], $$[$0]] }; 
break;
case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0-2], b:$$[$0] }; 
break;
case 86: case 87:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 88:
 this.$ = { op:'expr_if', type:null, line:getLine(this._$), expr:$$[$0-4], a:$$[$0-2], b:$$[$0] }; 
break;
case 89:
 this.$ = $$[$0]; 
break;
case 90:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:$$[$0-1], line:getLine(this._$) }; $$[$0-1].genesis_op = 'foreach'; 
break;
case 91:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:{op:'id',id:$$[$0-1],type:null}, line:getLine(this._$) }; 
break;
case 92: case 150:
 this.$ = { op:'principal', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 93:
 this.$ = { op:'optional', type:null, itemtype:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 94:
 this.$ = { op:'=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 95:
 this.$ = { op:'?=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 96:
 this.$ = { op:'delete', lval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 97:
 this.$ = { op:'countof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 98:
 this.$ = 'read-only'; 
break;
case 99:
 this.$ = 'public'; 
break;
case 100: case 101:
 this.$ = 'private'; 
break;
case 102:
 this.$ = { op:'func_def', vis:null, name:$$[$0-6], type:null, line:getLine(this._$), args:$$[$0-4], body:$$[$0-1], }; 
break;
case 103:
 this.$ = prependChild($$[$0], Object.assign({name:$$[$0-3], protect:'const'}, $$[$0-2])); 
break;
case 104:
 this.$ = [Object.assign({name:$$[$0-1], protect:'const'}, $$[$0])]; 
break;
case 105: case 113: case 132: case 138: case 185:
 this.$ = []; 
break;
case 106:
 this.$ = { op:'int', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 107:
 this.$ = { op:'uint', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 108:
 this.$ = { op:'func_call', name:$$[$0-3], type:null, line:getLine(this._$), args:$$[$0-1] }; 
break;
case 109:
 this.$ = prependChild($$[$0], { op:'id', id:$$[$0-2]} ); 
break;
case 111:
 this.$ = [{ op:'id', id:$$[$0] }]; 
break;
case 129:
 this.$= { op:'anon_func_def', vis:'private', args:$$[$0-5], body:$$[$0-1], type:null, line:getLine(this._$) }; 
break;
case 130:
 this.$ = prependChild($$[$0], { name:$$[$0-2], protect:'const' }); 
break;
case 131:
 this.$ = [{ name:$$[$0], protect:'const' }]; 
break;
case 133:
 this.$ = { type:'optional', itemtype:$$[$0], line:getLine(this._$) }; 
break;
case 139:
 this.$ = { type:'list', line:getLine(this._$), itemtype:$$[$0-4], size:$$[$0-1].val }; 
break;
case 143:
 this.$ = { type:'bool', line:getLine(this._$) }; 
break;
case 144:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 145:
 this.$ = { type:'principal', line:getLine(this._$) }; 
break;
case 147:
 this.$ = { type:'map', line:getLine(this._$), maptype:$$[$0-1] }; 
break;
case 148:
 this.$ = { type:'trait', itemtype:$$[$0-1], line:getLine(this._$) }; 
break;
case 154:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-3], errtype:$$[$0-1] }; 
break;
case 155:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-2] }; 
break;
case 156:
 this.$ = { type:'response', line:getLine(this._$),  errtype:$$[$0-1] }; 
break;
case 157: case 180:
 this.$ = {}; this.$[$$[$0-4]] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 158: case 181:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 159: case 160:
 this.$ = {op:'lit', type:'principal', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 161: case 162: case 163:
 this.$ = {op:'lit', type:'uint', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 164:
 this.$ = {op:'lit', type:'bool', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 165:
 this.$ = {op:'lit', type:'none', line:getLine(this._$), subtype:'keyword', val:yytext }; 
break;
case 166:
 this.$={ op:'lit', type:'principal', line:getLine(this._$), val:$$[$0] }; 
break;
case 173:
 this.$ = {op:'lit', type:'string', line:getLine(this._$), size:BigInt(yytext.length-2), val:yytext.substring(1,yytext.length-1) }; 
break;
case 174:
 this.$ = { op:'lit', type:'int', line:getLine(this._$), val:BigInt(yytext)}; 
break;
case 175:
 this.$ = { op:'lit', type:'uint', line:getLine(this._$), val:BigInt(yytext.substring(1)) }; 
break;
case 176:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:true }; 
break;
case 177:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:false }; 
break;
case 178:
 var b=hexStringToBuffer(yytext.substr(2)); this.$ = { op:'lit', type:'buff', line:getLine(this._$), size:BigInt(b.length), val:b }; 
break;
case 179:
 this.$ = {op:'lit', type:'map', maptype:null, line:getLine(this._$), val:$$[$0-1]}; 
break;
case 182:
 this.$ = { op:'lit', type:'list', itemtype:null, line:getLine(this._$), size:BigInt($$[$0-1].length), val:$$[$0-1] }; 
break;
case 184:
 this.$ = [$$[$0]] 
break;
case 186:
 this.$=$$[$0]; this.$.val = $$[$0-1] + this.$.val; 
break;
case 188:
 this.$=$$[$0]; this.$.val = '.' + $$[$0-1] + this.$.val; 
break;
case 189:
 this.$ = { op:'lit', type:'principal', line:getLine(this._$), val:'.'+$$[$0] }; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,41:$V1,49:$V2,53:$V3,54:$V4,61:$V5,63:$V6,66:$V7,104:$V8},{1:[3]},{5:[1,20]},{1:[2,2]},{4:21,5:[2,4],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,41:$V1,49:$V2,53:$V3,54:$V4,61:$V5,63:$V6,66:$V7,104:$V8},{8:22,49:$V9},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{49:[2,99],62:[1,24]},{49:[2,100]},{16:[1,25]},{16:[1,26]},{42:[1,27]},{42:[1,28]},{55:[1,29]},{56:30,76:$Vb,124:$Vc,137:32},{1:[2,1]},{5:[2,3]},o($Va,[2,5]),{16:[1,34]},{49:[2,98]},{26:[1,35]},{17:[1,36]},{16:[1,37]},{16:$Vd,27:38,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{43:[1,78],56:77,76:$Vb,124:$Vc,137:32},{16:[1,80],40:79},{76:$Vb,137:81},o($VH,[2,187]),{16:[1,82]},{50:[1,83]},{16:$Vd,27:84,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{18:85,20:86,21:87,22:88,23:89,28:[1,90],29:[1,91],33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{43:[1,106]},{19:[1,107],26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($Vc1,[2,63]),o($Vc1,[2,64]),{16:[1,129]},{16:$Vd,27:130,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:131,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:132,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:133,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:134,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},o($Vc1,[2,89]),{50:[1,135]},{50:[1,136]},{50:[1,137]},{16:$Vd,27:138,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{50:[1,139]},o($Vc1,[2,159]),o($Vc1,[2,160]),o($Vc1,[2,161]),o($Vc1,[2,162]),o($Vc1,[2,163]),o($Vc1,[2,164]),o($Vc1,[2,165]),o($Vc1,[2,166]),o($Vc1,[2,167]),o($Vc1,[2,168]),o($Vc1,[2,169]),o($Vc1,[2,170]),o($Vc1,[2,171]),o($Vc1,[2,172]),{50:[1,140]},{50:[1,141]},o([17,19,26,36,38,45,47,50,52,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,101],[2,173]),o($Vc1,[2,174]),o($Vc1,[2,175]),o($Vc1,[2,176]),o($Vc1,[2,177]),o($Vc1,[2,178]),{16:$Vd,27:143,33:$Ve,34:$Vf,36:$Vg,37:62,38:$Vd1,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG,136:142},{16:$Ve1,135:144},{17:[1,147],43:[1,146]},{42:$Vf1,45:$Vg1,48:150,57:148,58:149,60:$Vh1,61:$Vi1},{64:154,129:$VB},{129:[2,28]},o($VH,[2,186]),o($VH,[2,189],{137:155,76:$Vb}),{16:$Vj1,52:$Vk1,105:156},{19:[1,158],26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{19:[1,159]},{19:[1,160]},{19:[1,161]},{19:[1,162]},{16:$Vl1,24:[1,163],25:164},{16:$Vl1,25:166},{16:[1,168],30:167},{33:$VI,34:$VJ,35:$VK,39:$VL,43:$VN,59:103,99:$VO,110:169,112:$VQ,113:$VR,116:$VS},o($Vm1,[2,134]),o($Vm1,[2,135]),{87:[1,170]},{87:[1,171]},o($Vm1,[2,140]),o($Vm1,[2,141]),{36:[1,172]},o($Vm1,[2,143]),{36:[1,173]},o($Vm1,[2,145]),o($Vm1,[2,146]),{16:$Vn1,114:174},{87:[1,176]},{44:177,45:$Vo1,46:178,48:179,61:$Vi1},o($Va,[2,34]),{16:$Vd,27:180,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:[1,181]},{16:$Vd,27:182,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:183,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:184,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:185,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:186,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:187,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:188,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:189,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:190,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:191,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:192,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:193,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:194,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:195,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:196,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:197,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:198,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:199,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:202,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,52:$Vp1,64:61,75:39,76:$Vj,77:$Vq1,78:$Vr1,79:$Vs1,80:$Vt1,81:$Vu1,82:$Vv1,83:$Vw1,84:$Vx1,85:$Vy1,86:$Vz1,88:$VA1,90:$VB1,91:$VC1,92:$VD1,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,106:200,107:201,108:$VE1,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},o($Vc1,[2,67]),{26:$VT,36:$VU,50:$VV,52:[1,218],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($VF1,[2,69],{36:$VU,50:$VV,76:$VW,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VF1,[2,70],{36:$VU,50:$VV,76:$VW,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VG1,[2,86],{36:$VU,50:$VV,76:$VW}),o($VG1,[2,87],{36:$VU,50:$VV,76:$VW}),{16:$Vd,27:219,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{64:220,129:$VB},{16:$Vd,27:221,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},o($VG1,[2,96],{36:$VU,50:$VV,76:$VW}),{16:[1,222]},{16:$Vd,27:223,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:224,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{38:[1,225]},{26:$VT,36:$VU,38:[2,184],47:[1,226],50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{45:[1,227]},{95:[1,228]},{42:$Vf1,45:$Vg1,48:150,57:229,58:149,60:$Vh1,61:$Vi1},{16:[1,230]},{45:[1,231]},{45:[2,39],47:[1,232]},{49:[1,233]},{16:[1,234]},{42:[1,235]},{49:[2,44],62:[1,236]},{17:[1,237]},o($VH,[2,188]),{52:[1,238]},{23:239,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},o([5,15,16,33,34,36,41,43,49,50,53,54,61,63,66,70,73,76,77,78,92,93,97,99,100,102,103,104,117,118,119,120,121,122,123,124,129,130,131,132,133,134],[2,49]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),{23:240,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{16:[1,241]},{16:[2,25]},{16:[1,242]},{16:[1,244],31:243},{16:[2,26]},o($Vm1,[2,133]),{16:[1,246],76:[1,248],99:[1,247],115:245},{23:249,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{37:250,130:$VC,131:$VD},{37:251,130:$VC,131:$VD},{45:[1,252]},{95:[1,253]},{23:254,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,47:[1,255],59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{45:[1,256]},{45:[2,31],47:[1,257]},{49:[1,258]},{26:$VT,36:$VU,38:[1,259],50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($Vc1,[2,66]),o($VF1,[2,71],{36:$VU,50:$VV,76:$VW,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VF1,[2,72],{36:$VU,50:$VV,76:$VW,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VG1,[2,73],{36:$VU,50:$VV,76:$VW}),o($VG1,[2,74],{36:$VU,50:$VV,76:$VW}),o($VG1,[2,75],{36:$VU,50:$VV,76:$VW}),o($VG1,[2,76],{36:$VU,50:$VV,76:$VW}),o($VG1,[2,77],{36:$VU,50:$VV,76:$VW}),o($VH1,[2,78],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VH1,[2,79],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VH1,[2,80],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VH1,[2,81],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11}),o($VI1,[2,82],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51}),o($VI1,[2,83],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51}),o([19,26,38,45,47,52,90,91,94,95,101],[2,84],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71}),o([19,26,38,45,47,52,91,94,95,101],[2,85],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81}),{26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,95:[1,260],101:$Vb1},o($VJ1,[2,94],{26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1}),o($VJ1,[2,95],{26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1}),{52:[1,261]},{47:[1,262],52:[2,111]},{26:$VT,36:$VU,47:[1,263],50:$VV,52:[2,112],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($VK1,[2,114],{75:39,96:47,64:61,37:62,125:63,126:64,127:65,128:66,27:132,16:$Vd,33:$Ve,34:$Vf,36:$Vg,43:$Vh,50:$Vi,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG}),o($VK1,[2,115],{75:39,96:47,64:61,37:62,125:63,126:64,127:65,128:66,27:131,16:$Vd,33:$Ve,34:$Vf,36:$Vg,43:$Vh,50:$Vi,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG}),o($VK1,[2,116]),o($VK1,[2,117]),o($VK1,[2,118]),o($VK1,[2,119]),o($VK1,[2,120]),o($VK1,[2,121]),o($VK1,[2,122]),o($VK1,[2,123]),o($VK1,[2,124]),o($VK1,[2,125]),o($VK1,[2,126]),o($VK1,[2,127]),o($VK1,[2,128],{75:39,96:47,64:61,37:62,125:63,126:64,127:65,128:66,27:133,16:$Vd,33:$Ve,34:$Vf,36:$Vg,43:$Vh,50:$Vi,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG}),o($Vc1,[2,68]),{26:$VT,36:$VU,47:[1,264],50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{52:[1,265]},{26:$VT,36:$VU,50:$VV,52:[1,266],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{52:[1,267]},{26:$VT,36:$VU,50:$VV,52:[1,268],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{26:$VT,36:$VU,50:$VV,52:[1,269],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($Vc1,[2,182]),{16:$Vd,27:143,33:$Ve,34:$Vf,36:$Vg,37:62,38:$Vd1,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG,136:270},o($Vc1,[2,179]),{16:$Vd,27:271,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{45:[1,272]},{43:[1,273]},{19:[1,274]},{42:$Vf1,45:$Vg1,48:150,57:275,58:149,60:$Vh1,61:$Vi1},{16:[1,276]},{43:[1,277]},{56:278,76:$Vb,124:$Vc,137:32},{49:[2,45]},{16:[1,279]},{43:[1,280]},{47:[1,281],52:[2,104]},{19:[2,16]},{26:[1,282]},{19:[2,18],26:[1,283]},{32:284,33:[1,285],34:[1,286],35:[1,287],39:[1,288]},o([33,34,35,39],[2,27]),{36:[1,290],76:[1,291],86:[1,289]},o($VL1,[2,149]),{50:[1,292]},{16:[1,293]},{86:[1,294]},{38:[1,295]},{38:[1,296]},o($Vm1,[2,147]),{23:297,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{47:[1,298]},{23:299,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{19:[1,300]},{44:301,45:$Vo1,46:178,48:179,61:$Vi1},{16:[1,302]},o($Vc1,[2,65]),{16:$Vd,27:303,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},o($Vc1,[2,108]),{16:$Vd,27:202,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,52:$Vp1,64:61,75:39,76:$Vj,77:$Vq1,78:$Vr1,79:$Vs1,80:$Vt1,81:$Vu1,82:$Vv1,83:$Vw1,84:$Vx1,85:$Vy1,86:$Vz1,88:$VA1,90:$VB1,91:$VC1,92:$VD1,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,106:304,107:201,108:$VE1,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:202,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,52:$Vp1,64:61,75:39,76:$Vj,77:$Vq1,78:$Vr1,79:$Vs1,80:$Vt1,81:$Vu1,82:$Vv1,83:$Vw1,84:$Vx1,85:$Vy1,86:$Vz1,88:$VA1,90:$VB1,91:$VC1,92:$VD1,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,106:305,107:201,108:$VE1,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:[1,307],50:[1,308],98:306},o($Vc1,[2,92]),o($Vc1,[2,93]),o($Vc1,[2,97]),o($Vc1,[2,106]),o($Vc1,[2,107]),{38:[2,183]},{26:$VT,36:$VU,45:[2,181],47:[1,309],50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{19:[1,310]},{42:$Vf1,45:$Vg1,48:150,57:311,58:149,60:$Vh1,61:$Vi1},o($Va,[2,37]),{45:[2,38]},{50:[1,312]},{44:313,45:$Vo1,46:178,48:179,61:$Vi1},o($VM1,[2,43]),{19:[1,314]},o($VN1,$VO1,{67:315,65:316,9:317,66:$V7}),{16:$Vj1,52:$Vk1,105:318},{16:$Vd,27:319,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:320,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{19:[2,20]},{19:[2,21]},{19:[2,22]},{36:[1,321]},{36:[1,322]},o($Vm1,[2,148]),{16:$Vd,27:323,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:[1,324]},{64:325,129:$VB},o($VL1,[2,153]),{36:[1,326]},o($Vm1,[2,142]),o($Vm1,[2,144]),{45:[2,158],47:[1,327]},{23:328,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,86:[1,329],99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{86:[1,330]},o($Va,[2,29]),{45:[2,30]},{50:[1,331]},o([19,26,38,45,47,52,95,101],[2,88],{36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1}),{52:[2,109]},{52:[2,110]},{52:[1,332]},{52:[1,333]},{16:$VP1,52:$VQ1,109:334},{16:$Ve1,135:336},o($Va,[2,35]),{45:[1,337]},{23:339,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,51:338,52:$VR1,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{45:[1,340]},o($Va,[2,46]),{45:[1,341]},{8:346,16:$Vd,27:344,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,49:$V9,50:$Vi,64:61,68:342,69:343,70:$VS1,73:$VT1,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},o($VN1,$VO1,{9:317,65:348,66:$V7}),{52:[2,103]},{19:[2,17],26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{19:[2,19],26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{37:349,130:$VC,131:$VD},{37:350,130:$VC,131:$VD},{26:$VT,36:$VU,38:[1,351],50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($VL1,[2,152]),{52:[1,352]},{37:353,130:$VC,131:$VD},{16:$Vn1,114:354},{86:[1,355]},o($Vm1,[2,155]),o($Vm1,[2,156]),{23:339,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,51:356,52:$VR1,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},o($Vc1,[2,90]),o($Vc1,[2,91]),{52:[1,357]},{47:[1,358],52:[2,131]},{45:[2,180]},{19:[1,359]},{52:[1,360]},{47:[1,361],52:[2,137]},o($VM1,[2,42]),o([5,15,16,33,34,36,41,43,45,49,50,53,54,61,63,66,70,73,76,77,78,92,93,97,99,100,102,103,104,117,118,119,120,121,122,123,124,129,130,131,132,133,134],[2,102]),{45:[2,50]},{8:346,16:$Vd,27:344,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,45:[2,52],49:$V9,50:$Vi,64:61,68:362,69:343,70:$VS1,73:$VT1,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{19:[1,363],26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{50:[1,364]},o($VU1,[2,57]),{16:$Vd,27:365,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},o($VN1,[2,47]),{38:[1,366]},{38:[1,367]},o($VL1,[2,151]),o($VL1,[2,150]),{38:[1,368]},{45:[2,157]},o($Vm1,[2,154]),{52:[1,369]},{24:[1,370]},{16:$VP1,52:$VQ1,109:371},o($Va,[2,36]),{24:[1,372]},{23:339,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,51:373,52:$VR1,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},{45:[2,51]},{8:346,16:$Vd,27:344,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,45:[2,54],49:$V9,50:$Vi,64:61,68:374,69:343,70:$VS1,73:$VT1,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{16:$Vd,27:375,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{19:[1,376],26:$VT,36:$VU,50:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{19:[2,23]},{19:[2,24]},o($Vm1,[2,139]),{24:[1,377]},{43:[1,378]},{52:[2,130]},{59:379,116:$VS},{52:[2,136]},{45:[2,53]},{26:$VT,36:$VU,50:$VV,52:[1,380],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($VU1,[2,58]),{23:381,33:$VI,34:$VJ,35:$VK,39:$VL,42:$VM,43:$VN,59:103,99:$VO,100:$VP,110:94,111:93,112:$VQ,113:$VR,116:$VS},o($VN1,$VO1,{65:316,9:317,67:382,66:$V7}),o($VM1,[2,41]),{43:[1,383]},o($VM1,[2,33]),{45:[1,384]},o($VN1,$VO1,{65:316,9:317,67:385,66:$V7}),{52:[2,129]},{45:[1,386]},o($VU1,$VV1,{71:387,72:388,74:[1,389]}),o($VU1,$VV1,{72:390,74:[1,391]}),o($VU1,[2,56]),{43:$VW1,70:[1,392]},o($VU1,[2,55]),{43:$VW1,70:[1,394]},{50:[1,395]},o($VN1,$VO1,{65:316,9:317,67:396,66:$V7}),{50:[1,397]},{16:$Vd,27:398,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{45:[1,399]},{16:$Vd,27:400,33:$Ve,34:$Vf,36:$Vg,37:62,43:$Vh,50:$Vi,64:61,75:39,76:$Vj,77:$Vk,78:$Vl,92:$Vm,93:$Vn,96:47,97:$Vo,99:$Vp,100:$Vq,102:$Vr,103:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:63,126:64,127:65,128:66,129:$VB,130:$VC,131:$VD,132:$VE,133:$VF,134:$VG},{26:$VT,36:$VU,50:$VV,52:[1,401],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},o($VU1,[2,61]),{26:$VT,36:$VU,50:$VV,52:[1,402],76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$,82:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,94:$Va1,101:$Vb1},{43:[1,403]},{43:[1,404]},o($VN1,$VO1,{65:316,9:317,67:405,66:$V7}),o($VN1,$VO1,{65:316,9:317,67:406,66:$V7}),{45:[1,407]},{45:[1,408]},o($VX1,[2,60]),o($VX1,[2,59])],
defaultActions: {3:[2,2],13:[2,100],20:[2,1],21:[2,3],24:[2,98],80:[2,28],165:[2,25],168:[2,26],236:[2,45],240:[2,16],270:[2,183],275:[2,38],284:[2,20],285:[2,21],286:[2,22],301:[2,30],304:[2,109],305:[2,110],318:[2,103],336:[2,180],342:[2,50],354:[2,157],362:[2,51],366:[2,23],367:[2,24],371:[2,130],373:[2,136],374:[2,53],384:[2,129]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function prependChild(node, child){
        node.unshift(child);
        return node;
    }
    function getLine(v) {
        if (typeof v == 'number') return v;
        return v.first_line;
    }
    function parseError(yy, opts) {
        var expected = opts.expected ? `Expecting ${opts.expected}` : '';
        yy.parser.parseError(`Parse error on line ${opts.line}:\n${yy.lexer.showPosition()}\n${expected}`, {});
    }
    function expectText(yy, lineno, desired, actual) {
        if (desired == actual) return;
        parseError(yy, {
             line: lineno,
             expected:`'${desired}' not '${actual}'`
        });
    }
    function hexStringToBuffer(str) {
        if (str.length % 2 == 1) str='0'+str;
        return Buffer.from(str,'hex');
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 63;
break;
case 2:return 66;
break;
case 3:return 104;
break;
case 4:return 61;
break;
case 5:return 62;
break;
case 6:return 49;
break;
case 7:return 15;
break;
case 8:return 54;
break;
case 9:return 55;
break;
case 10:return 41;
break;
case 11:return 'USE';
break;
case 12:return 17;
break;
case 13:return 42;
break;
case 14:return 53;
break;
case 15:return 60;
break;
case 16:return 28;
break;
case 17:return 29;
break;
case 18:return 70;
break;
case 19:return 74;
break;
case 20:return 73;
break;
case 21:return 97;
break;
case 22:return 103;
break;
case 23:return 112;
break;
case 24:return 33;
break;
case 25:return 34;
break;
case 26:return 113;
break;
case 27:return 39;
break;
case 28:return 99;
break;
case 29:return 116;
break;
case 30:return 35;
break;
case 31:return 100;
break;
case 32:return 102;
break;
case 33:return 132;
break;
case 34:return 133;
break;
case 35:return 123;
break;
case 36:return 117;
break;
case 37:return 118;
break;
case 38:return 119;
break;
case 39:return 120;
break;
case 40:return 121;
break;
case 41:return 122;
break;
case 42:return 130;
break;
case 43:return 131;
break;
case 44:return 134;
break;
case 45:return 124;
break;
case 46:return 16;
break;
case 47:return 129;
break;
case 48:return 78;
break;
case 49:return 77;
break;
case 50:return 79;
break;
case 51:return 80;
break;
case 52:return 81;
break;
case 53:return 82;
break;
case 54:return 83;
break;
case 55:return 84;
break;
case 56:return 85;
break;
case 57:return 86;
break;
case 58:return 87;
break;
case 59:return 88;
break;
case 60:return 89;
break;
case 61:return 101;
break;
case 62:return 26;
break;
case 63:return 90;
break;
case 64:return 91;
break;
case 65:return 92;
break;
case 66:return 93;
break;
case 67:return 76;
break;
case 68:return 95;
break;
case 69:return 19;
break;
case 70:return 47;
break;
case 71:return 50;
break;
case 72:return 52;
break;
case 73:return 43;
break;
case 74:return 45;
break;
case 75:return 36;
break;
case 76:return 38;
break;
case 77:return 94;
break;
case 78:return 24;
break;
case 79:/* skip whitespace */
break;
case 80:return 'UNKNOWN';
break;
case 81:return 5;
break;
case 82:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:import)/,/^(?:const)/,/^(?:private)/,/^(?:public)/,/^(?:readonly)/,/^(?:function)/,/^(?:persist)/,/^(?:declare)/,/^(?:extern)/,/^(?:define)/,/^(?:use)/,/^(?:as)/,/^(?:trait)/,/^(?:implement)/,/^(?:implements)/,/^(?:fungible-token)/,/^(?:nonfungible-token)/,/^(?:if)/,/^(?:else)/,/^(?:return)/,/^(?:foreach)/,/^(?:_countof)/,/^(?:list)/,/^(?:int)/,/^(?:uint)/,/^(?:bool)/,/^(?:string)/,/^(?:principal)/,/^(?:response)/,/^(?:buff)/,/^(?:optional)/,/^(?:delete)/,/^(?:true)/,/^(?:false)/,/^(?:none)/,/^(?:contract-caller)/,/^(?:tx-sender)/,/^(?:block-height)/,/^(?:burn-block-height)/,/^(?:stx-liquid-supply)/,/^(?:is-in-regtest)/,/^(?:([0-9])+)/,/^(?:u([0-9])+)/,/^(?:0x([0-9A-Fa-f])*)/,/^(?:([S][A-Z0-9]{39,40}))/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*[!?]{0,1}))/,/^(?:("(?:[^"\\]|\\.)*"))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\*\*)/,/^(?:\^)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\?=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:#)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:=>)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crystalAst;
exports.Parser = crystalAst.Parser;
exports.parse = function () { return crystalAst.parse.apply(crystalAst, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}