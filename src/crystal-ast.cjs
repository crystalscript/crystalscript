/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crystalAst = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[2,109],$V3=[1,17],$V4=[1,18],$V5=[1,12],$V6=[1,19],$V7=[1,14],$V8=[1,13],$V9=[1,23],$Va=[5,15,42,50,54,55,62,64,67,111],$Vb=[1,35],$Vc=[1,32],$Vd=[1,34],$Ve=[1,42],$Vf=[1,71],$Vg=[1,72],$Vh=[1,78],$Vi=[1,79],$Vj=[1,44],$Vk=[1,43],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,64],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[16,17,44,46,48],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[1,105],$VO=[1,106],$VP=[1,99],$VQ=[1,109],$VR=[1,107],$VS=[1,96],$VT=[1,100],$VU=[1,104],$VV=[1,110],$VW=[1,135],$VX=[1,113],$VY=[1,137],$VZ=[1,114],$V_=[1,116],$V$=[1,115],$V01=[1,117],$V11=[1,118],$V21=[1,119],$V31=[1,120],$V41=[1,121],$V51=[1,122],$V61=[1,123],$V71=[1,124],$V81=[1,125],$V91=[1,126],$Va1=[1,127],$Vb1=[1,128],$Vc1=[1,129],$Vd1=[1,130],$Ve1=[1,131],$Vf1=[1,132],$Vg1=[1,133],$Vh1=[1,134],$Vi1=[1,136],$Vj1=[19,26,36,38,46,48,51,53,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,107],$Vk1=[1,146],$Vl1=[1,147],$Vm1=[1,151],$Vn1=[1,152],$Vo1=[2,207],$Vp1=[1,156],$Vq1=[1,163],$Vr1=[2,41],$Vs1=[1,164],$Vt1=[1,165],$Vu1=[1,170],$Vv1=[2,113],$Vw1=[1,178],$Vx1=[16,19,24,46,48,53,92],$Vy1=[2,157],$Vz1=[2,158],$VA1=[2,163],$VB1=[1,189],$VC1=[2,33],$VD1=[1,246],$VE1=[1,247],$VF1=[1,248],$VG1=[2,123],$VH1=[1,224],$VI1=[1,223],$VJ1=[1,225],$VK1=[1,226],$VL1=[1,227],$VM1=[1,228],$VN1=[1,230],$VO1=[1,229],$VP1=[1,231],$VQ1=[1,232],$VR1=[1,233],$VS1=[1,234],$VT1=[1,235],$VU1=[1,236],$VV1=[1,237],$VW1=[1,239],$VX1=[1,240],$VY1=[1,241],$VZ1=[1,242],$V_1=[1,245],$V$1=[1,243],$V02=[1,238],$V12=[19,26,38,46,48,53,78,79,86,87,88,89,90,91,92,93,94,95,96,97,100,101,107],$V22=[19,26,38,46,48,53,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,107],$V32=[19,26,38,46,48,53,86,87,88,89,90,91,92,93,94,95,96,97,100,101,107],$V42=[19,26,38,46,48,53,86,87,90,91,92,93,94,95,96,97,100,101,107],$V52=[19,26,38,46,48,53,86,87,94,95,96,97,100,101,107],$V62=[19,38,46,48,53,101],$V72=[48,53],$V82=[46,48,53],$V92=[36,77,92],$Va2=[46,48],$Vb2=[16,33,34,36,44,50,51,71,74,77,78,79,84,98,99,103,105,106,108,109,110,125,126,127,128,129,130,131,132,137,138,139,140,141,142],$Vc2=[2,50],$Vd2=[1,383],$Ve2=[1,387],$Vf2=[2,147],$Vg2=[2,155],$Vh2=[1,398],$Vi2=[1,400],$Vj2=[16,33,34,36,44,46,50,51,71,74,77,78,79,84,98,99,103,105,106,108,109,110,125,126,127,128,129,130,131,132,137,138,139,140,141,142],$Vk2=[2,64],$Vl2=[1,449],$Vm2=[16,33,34,36,44,46,50,51,71,74,75,77,78,79,84,98,99,103,105,106,108,109,110,125,126,127,128,129,130,131,132,137,138,139,140,141,142];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"prog":3,"definitions":4,"ENDOFFILE":5,"definition":6,"visibility":7,"func_def":8,"const":9,"persist":10,"define_trait":11,"implement_trait":12,"declare_extern":13,"import_file":14,"PERSIST":15,"ID":16,"AS":17,"persist_map_def":18,"SEMICOLON":19,"persist_var_def":20,"persist_fungible_token_def":21,"persist_nonfungible_token_def":22,"type":23,"ARROW":24,"txt_with":25,"ASSIGNMENT":26,"expr":27,"FUNGIBLE_TOKEN":28,"NONFUNGIBLE_TOKEN":29,"txt_identified":30,"txt_by":31,"asset_id_type":32,"INT":33,"UINT":34,"BUFF":35,"LBRACKET":36,"int_literal":37,"RBRACKET":38,"STRING":39,"STRING-ASCII":40,"txt_from":41,"DEFINE":42,"TRAIT":43,"LBRACE":44,"trait_items":45,"RBRACE":46,"trait_item":47,"COMMA":48,"public_visibility":49,"FUNCTION":50,"LPAREN":51,"type_list":52,"RPAREN":53,"IMPLEMENT":54,"DECLARE":55,"EXTERN":56,"contract_id":57,"extern_contract_defs":58,"extern_contract_def":59,"response_type":60,"IMPLEMENTS":61,"PUBLIC":62,"READONLY":63,"IMPORT":64,"string_literal":65,"consts":66,"CONST":67,"consts_then_stmts":68,"stmts":69,"stmt":70,"IF":71,"elseif":72,"else":73,"RETURN":74,"ELSE":75,"literal":76,"DOT":77,"MINUS":78,"PLUS":79,"MULTIPLY":80,"DIVIDE":81,"MOD":82,"POW":83,"BIT_NOT":84,"BIT_XOR":85,"BIT_AND":86,"BIT_OR":87,"BIT_SHIFT_LEFT":88,"BIT_SHIFT_RIGHT":89,"GTE":90,"LTE":91,"GT":92,"LT":93,"EQUALS":94,"NOTEQUALS":95,"AND":96,"OR":97,"NOT":98,"UNWRAP":99,"EXPR_IF":100,"COLON":101,"func_call":102,"FOREACH":103,"anon_func_def":104,"PRINCIPAL":105,"OPTIONAL":106,"INSERT_ASSIGNMENT":107,"DELETE":108,"COUNTOF":109,"TYPEOF":110,"PRIVATE":111,"func_args_def":112,"func_args":113,"operator":114,"serializable_type":115,"LE":116,"anon_func_args_def":117,"actual_type":118,"trait_type":119,"LIST":120,"BOOL":121,"mapkeysdef":122,"trait_itemtype":123,"RESPONSE":124,"CONTRACT-CALLER":125,"TX-SENDER":126,"BLOCK-HEIGHT":127,"BURN-BLOCK-HEIGHT":128,"STX-LIQUID-SUPPLY":129,"IS-IN-REGTEST":130,"NONE":131,"STX_ADDRESS":132,"bool_literal":133,"buff_literal":134,"list_literal":135,"map_literal":136,"QUOTED-STRING":137,"INT_LITERAL":138,"UINT_LITERAL":139,"TRUE":140,"FALSE":141,"HEX_NUMBER":142,"map_literal_vals":143,"list_literal_vals":144,"contract_id_relative":145,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",15:"PERSIST",16:"ID",17:"AS",19:"SEMICOLON",24:"ARROW",26:"ASSIGNMENT",28:"FUNGIBLE_TOKEN",29:"NONFUNGIBLE_TOKEN",33:"INT",34:"UINT",35:"BUFF",36:"LBRACKET",38:"RBRACKET",39:"STRING",40:"STRING-ASCII",42:"DEFINE",43:"TRAIT",44:"LBRACE",46:"RBRACE",48:"COMMA",50:"FUNCTION",51:"LPAREN",53:"RPAREN",54:"IMPLEMENT",55:"DECLARE",56:"EXTERN",61:"IMPLEMENTS",62:"PUBLIC",63:"READONLY",64:"IMPORT",67:"CONST",71:"IF",74:"RETURN",75:"ELSE",77:"DOT",78:"MINUS",79:"PLUS",80:"MULTIPLY",81:"DIVIDE",82:"MOD",83:"POW",84:"BIT_NOT",85:"BIT_XOR",86:"BIT_AND",87:"BIT_OR",88:"BIT_SHIFT_LEFT",89:"BIT_SHIFT_RIGHT",90:"GTE",91:"LTE",92:"GT",93:"LT",94:"EQUALS",95:"NOTEQUALS",96:"AND",97:"OR",98:"NOT",99:"UNWRAP",100:"EXPR_IF",101:"COLON",103:"FOREACH",105:"PRINCIPAL",106:"OPTIONAL",107:"INSERT_ASSIGNMENT",108:"DELETE",109:"COUNTOF",110:"TYPEOF",111:"PRIVATE",116:"LE",120:"LIST",121:"BOOL",124:"RESPONSE",125:"CONTRACT-CALLER",126:"TX-SENDER",127:"BLOCK-HEIGHT",128:"BURN-BLOCK-HEIGHT",129:"STX-LIQUID-SUPPLY",130:"IS-IN-REGTEST",131:"NONE",132:"STX_ADDRESS",137:"QUOTED-STRING",138:"INT_LITERAL",139:"UINT_LITERAL",140:"TRUE",141:"FALSE",142:"HEX_NUMBER"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,5],[10,5],[10,5],[10,5],[18,3],[20,5],[21,3],[21,5],[22,4],[32,1],[32,1],[32,4],[32,4],[32,4],[25,1],[30,1],[31,1],[41,1],[11,7],[45,3],[45,1],[45,0],[47,8],[12,4],[13,7],[13,9],[13,6],[58,3],[58,1],[58,0],[59,8],[59,5],[59,3],[49,1],[49,2],[14,7],[14,5],[66,2],[66,0],[9,5],[68,2],[69,2],[69,1],[69,3],[69,2],[70,9],[70,8],[70,1],[70,3],[72,9],[72,8],[73,4],[73,0],[27,1],[27,1],[27,4],[27,3],[27,2],[27,3],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,5],[27,1],[27,6],[27,6],[27,4],[27,4],[27,3],[27,3],[27,2],[27,4],[27,4],[7,2],[7,1],[7,1],[7,0],[8,8],[112,4],[112,2],[112,0],[102,4],[102,4],[102,4],[113,3],[113,3],[113,3],[113,1],[113,1],[113,1],[113,0],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[104,7],[117,3],[117,1],[117,0],[23,2],[23,1],[23,1],[115,2],[115,1],[52,3],[52,1],[52,0],[118,7],[118,1],[118,1],[118,4],[118,1],[118,4],[118,4],[118,1],[118,1],[118,3],[119,4],[123,1],[123,4],[123,4],[123,3],[123,2],[60,6],[60,5],[60,5],[122,5],[122,5],[122,3],[122,3],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[65,1],[37,1],[37,1],[133,1],[133,1],[134,1],[136,3],[143,5],[143,5],[143,3],[143,3],[135,3],[144,3],[144,1],[144,0],[57,2],[57,1],[145,3],[145,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return []; 
break;
case 3:
 this.$ = prependChild($$[$0],$$[$0-1]); 
break;
case 4: case 122:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; this.$.vis = $$[$0-1]; 
break;
case 12:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datamap', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 13:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datavar', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 14:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'ft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 15:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'nft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 16:
 this.$ = { type:'datamap', keytype:$$[$0-2], valtype:$$[$0], line:getLine(this._$) }; 
break;
case 17:
 expectText(yy, yylineno, 'initial-value', $$[$0-2]); this.$ = {  initial_val:$$[$0], line:getLine(this._$) }; Object.assign(this.$, $$[$0-4]); 
break;
case 18:
 expectText(yy, yylineno, 'unlimited-supply', $$[$0]); this.$ = {  type:'ft', total_supply:null, line:getLine(this._$) }; 
break;
case 19:
 expectText(yy, yylineno, 'total-supply', $$[$0-2]); this.$ = {  type:'ft', total_supply:$$[$0], line:getLine(this._$) }; 
break;
case 20:
 this.$ = { type:'nft', tokenidtype: $$[$0], line:getLine(this._$) }; 
break;
case 21: case 157:
 this.$ = { type:'int', line:getLine(this._$) }; 
break;
case 22: case 158:
 this.$ = { type:'uint', line:getLine(this._$) }; 
break;
case 23: case 159:
 this.$ = { type:'buff', line:getLine(this._$), size:$$[$0-1].val }; 
break;
case 24:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) parserError(yy, {line:yylineno, expected:'positive integer for index'}); 
break;
case 25:
 this.$ = { type:'string-ascii', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) parserError(yy, {line:yylineno, expected:'positive integer for index'}); 
break;
case 26:
 expectText(yy, yylineno, 'with', $$[$0]); 
break;
case 27:
 expectText(yy, yylineno, 'identified', $$[$0]); 
break;
case 28:
 expectText(yy, yylineno, 'by', $$[$0]); 
break;
case 29:
 expectText(yy, yylineno, 'from', $$[$0]); 
break;
case 30:
 this.$= { op:'trait_def', id:$$[$0-4], traits:$$[$0-2], line:getLine(this._$) }; 
break;
case 31: case 39:
 this.$=prependChild($$[$0], $$[$0-2]); 
break;
case 32: case 40:
 this.$=[$$[$0]]; 
break;
case 33: case 41: case 50:
 this.$=[]; 
break;
case 34:
 this.$={op:'extern_func_def', vis:$$[$0-7], name:$$[$0-5], args:$$[$0-3] }; Object.assign(this.$, $$[$0]); 
break;
case 35:
 this.$={ op:'impl_trait', expr:$$[$0-1], line:getLine(this._$) }; 
break;
case 36:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:$$[$0-4], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 37:
 this.$={ op:'declare_extern', type:'extern_decl', id:$$[$0-4], protect:'const', access:'contract', contract_id:$$[$0-6], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 38:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:null, defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 42:
 this.$=Object.assign({ op:'extern_func_def', name:$$[$0-5], vis:$$[$0-7], args:$$[$0-3], contract_id:null, line:getLine(this._$) }, $$[$0]); 
break;
case 43:
 this.$={ op:'extern_trait_def', id:$$[$0-3], traits:$$[$0-1], contract_id:null }; 
break;
case 44:
 this.$={ op:'extern_trait_def_impl', impl_contract_id:$$[$0], contract_id:null }; 
break;
case 46:
 this.$='read-only' 
break;
case 47:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:$$[$0-5], as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 48:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:null, as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 49:
 this.$=prependChild($$[$0], $$[$0-1]); 
break;
case 51:
 this.$ = { op:'vardecl', id:$$[$0-3], protect:'const', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 52:
 this.$ = $$[$0-1]; this.$.push.apply(this.$, $$[$0]); 
break;
case 53:
 this.$ = prependChild($$[$0], $$[$0-1]); 
break;
case 54: case 154:
 this.$ = [ $$[$0] ]; 
break;
case 55: case 119: case 153: case 205:
 this.$ = prependChild($$[$0], $$[$0-2]); 
break;
case 56:
 this.$ = [ $$[$0-1] ]; 
break;
case 57:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-6], body:$$[$0-3], elsif:$$[$0-1], else_body: $$[$0] }; 
break;
case 58:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-5], body:$$[$0-2], else_body: $$[$0] }; 
break;
case 59:
 this.$ = $$[$0]; this.$.vis='private'; 
break;
case 60:
 this.$ = { op:'return', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 61:
 this.$ = $$[$0-8]; this.$.push({ expr:$$[$0-4], body:$$[$0-1]}); 
break;
case 62:
 this.$ = [{ expr:$$[$0-4], body:$$[$0-1] }]; 
break;
case 63: case 70:
 this.$ = $$[$0-1]; 
break;
case 64:
 this.$ = null; 
break;
case 66: case 167:
 this.$={ op:'id', type:null, line:getLine(this._$), id:$$[$0] }; 
break;
case 67: case 169:
 this.$ = { op:'[]', type:null, line:getLine(this._$), expr:$$[$0-3], bracket:$$[$0-1] }; 
break;
case 68: case 170:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:$$[$0-2] }; 
break;
case 69: case 171:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:null }; 
break;
case 71:
 this.$ = { op:'sign-', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 72:
 this.$ = { op:'sign+', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 73: case 74: case 75: case 76: case 91: case 92:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), multi:[$$[$0-2], $$[$0]] }; 
break;
case 77: case 78: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0-2], b:$$[$0] }; 
break;
case 79: case 93: case 94:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 95:
 this.$ = { op:'expr_if', type:null, line:getLine(this._$), expr:$$[$0-4], a:$$[$0-2], b:$$[$0] }; 
break;
case 96:
 this.$ = $$[$0]; 
break;
case 97:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:$$[$0-1], line:getLine(this._$) }; $$[$0-1].genesis_op = 'foreach'; 
break;
case 98:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:{op:'id',id:$$[$0-1],type:null}, line:getLine(this._$) }; 
break;
case 99: case 168:
 this.$ = { op:'principal', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 100:
 this.$ = { op:'optional', type:null, itemtype:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 101:
 this.$ = { op:'=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 102:
 this.$ = { op:'?=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 103:
 this.$ = { op:'delete', lval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 104:
 this.$ = { op:'_countof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 105:
 this.$ = { op:'_typeof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 106:
 this.$ = 'read-only'; 
break;
case 107:
 this.$ = 'public'; 
break;
case 108: case 109:
 this.$ = 'private'; 
break;
case 110:
 this.$ = { op:'func_def', vis:null, name:$$[$0-6], type:null, line:getLine(this._$), args:$$[$0-4], body:$$[$0-1], }; 
break;
case 111:
 this.$ = prependChild($$[$0], Object.assign({name:$$[$0-3], protect:'const'}, $$[$0-2])); 
break;
case 112:
 this.$ = [Object.assign({name:$$[$0-1], protect:'const'}, $$[$0])]; 
break;
case 113: case 123: case 147: case 155: case 207:
 this.$ = []; 
break;
case 114:
 this.$ = { op:'int', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 115:
 this.$ = { op:'uint', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 116:
 this.$ = { op:'func_call', name:$$[$0-3], type:null, line:getLine(this._$), args:$$[$0-1] }; 
break;
case 117:
 this.$ = prependChild($$[$0], { op:'id', id:$$[$0-2] }); 
break;
case 118:
 this.$ = prependChild($$[$0], { op:'lit', type:'typedef', typedef:$$[$0-2] }); 
break;
case 120:
 this.$ = [{ op:'id', id:$$[$0] }]; 
break;
case 121:
 this.$ = [{ op:'lit', type:'typedef', typedef:$$[$0] }]; 
break;
case 144:
 this.$= { op:'anon_func_def', vis:'private', args:$$[$0-5], body:$$[$0-1], type:null, line:getLine(this._$) }; 
break;
case 145:
 this.$ = prependChild($$[$0], { name:$$[$0-2], protect:'const' }); 
break;
case 146:
 this.$ = [{ name:$$[$0], protect:'const' }]; 
break;
case 148: case 151:
 this.$ = { type:'optional', itemtype:$$[$0], line:getLine(this._$) }; 
break;
case 156:
 this.$ = { type:'list', line:getLine(this._$), itemtype:$$[$0-4], size:$$[$0-1].val }; 
break;
case 160:
 this.$ = { type:'bool', line:getLine(this._$) }; 
break;
case 161:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 162:
 this.$ = { type:'string-ascii', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 163:
 this.$ = { type:'principal', line:getLine(this._$) }; 
break;
case 165:
 this.$ = { type:'map', line:getLine(this._$), maptype:$$[$0-1] }; 
break;
case 166:
 this.$ = { type:'trait', itemtype:$$[$0-1], line:getLine(this._$) }; 
break;
case 172:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-3], errtype:$$[$0-1] }; 
break;
case 173:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-2] }; 
break;
case 174:
 this.$ = { type:'response', line:getLine(this._$),  errtype:$$[$0-1] }; 
break;
case 175: case 200:
 this.$ = {}; this.$[$$[$0-4]] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 176: case 201:
 this.$ = {}; this.$[$$[$0-4].val] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 177: case 202:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 178: case 203:
 this.$ = {}; this.$[$$[$0-2].val] = $$[$0]; 
break;
case 179: case 180:
 this.$ = {op:'lit', type:'principal', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 181: case 182: case 183:
 this.$ = {op:'lit', type:'uint', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 184:
 this.$ = {op:'lit', type:'bool', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 185:
 this.$ = {op:'lit', type:'none', line:getLine(this._$), subtype:'keyword', val:yytext }; 
break;
case 186:
 this.$={ op:'lit', type:'principal', line:getLine(this._$), val:$$[$0] }; 
break;
case 193:
 this.$ = {op:'lit', type:'string', line:getLine(this._$), size:BigInt(yytext.length-2), val:yytext.substring(1,yytext.length-1) }; 
break;
case 194:
 this.$ = { op:'lit', type:'int', line:getLine(this._$), val:BigInt(yytext)}; 
break;
case 195:
 this.$ = { op:'lit', type:'uint', line:getLine(this._$), val:BigInt(yytext.substring(1)) }; 
break;
case 196:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:true }; 
break;
case 197:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:false }; 
break;
case 198:
 var b=hexStringToBuffer(yytext.substr(2)); this.$ = { op:'lit', type:'buff', line:getLine(this._$), size:BigInt(b.length), val:b }; 
break;
case 199:
 this.$ = {op:'lit', type:'map', maptype:null, line:getLine(this._$), val:$$[$0-1]}; 
break;
case 204:
 this.$ = { op:'lit', type:'list', itemtype:null, line:getLine(this._$), size:BigInt($$[$0-1].length), val:$$[$0-1] }; 
break;
case 206:
 this.$ = [$$[$0]] 
break;
case 208:
 this.$=$$[$0]; this.$.val = $$[$0-1] + this.$.val; 
break;
case 210:
 this.$=$$[$0]; this.$.val = '.' + $$[$0-1] + this.$.val; 
break;
case 211:
 this.$ = { op:'lit', type:'principal', line:getLine(this._$), val:'.'+$$[$0] }; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,42:$V1,50:$V2,54:$V3,55:$V4,62:$V5,64:$V6,67:$V7,111:$V8},{1:[3]},{5:[1,20]},{1:[2,2]},{4:21,5:[2,4],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,42:$V1,50:$V2,54:$V3,55:$V4,62:$V5,64:$V6,67:$V7,111:$V8},{8:22,50:$V9},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{50:[2,107],63:[1,24]},{50:[2,108]},{16:[1,25]},{16:[1,26]},{43:[1,27]},{43:[1,28]},{56:[1,29]},{57:30,65:31,77:$Vb,132:$Vc,137:$Vd,145:33},{1:[2,1]},{5:[2,3]},o($Va,[2,5]),{16:[1,36]},{50:[2,106]},{26:[1,37]},{17:[1,38]},{16:[1,39]},{16:$Ve,27:40,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{44:[1,81],57:80,77:$Vb,132:$Vc,145:33},{16:[1,83],41:82},{17:[1,84]},{77:$Vb,145:85},o($VJ,[2,209]),o([17,19,26,36,38,46,48,51,53,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,107],[2,193]),{16:[1,86]},{51:[1,87]},{16:$Ve,27:88,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{18:89,20:90,21:91,22:92,23:93,28:[1,94],29:[1,95],33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{44:[1,111]},{19:[1,112],26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($Vj1,[2,65]),o($Vj1,[2,66]),{16:[1,138]},{16:$Ve,27:139,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:140,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:141,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:142,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:143,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:144,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($Vj1,[2,96]),{51:[1,145]},{51:$Vk1},{51:$Vl1},{16:$Ve,27:148,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{51:[1,149]},{51:[1,150]},o($Vj1,[2,179]),o($Vj1,[2,180]),o($Vj1,[2,181]),o($Vj1,[2,182]),o($Vj1,[2,183]),o($Vj1,[2,184]),o($Vj1,[2,185]),o($Vj1,[2,186]),o($Vj1,[2,187]),o($Vj1,[2,188]),o($Vj1,[2,189]),o($Vj1,[2,190]),o($Vj1,[2,191]),o($Vj1,[2,192]),{51:$Vm1},{51:$Vn1},o($Vj1,[2,194]),o($Vj1,[2,195]),o($Vj1,[2,196]),o($Vj1,[2,197]),o($Vj1,[2,198]),{16:$Ve,27:154,33:$Vf,34:$Vg,36:$Vh,37:66,38:$Vo1,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI,144:153},{16:$Vp1,65:157,137:$Vd,143:155},{17:[1,159],44:[1,158]},{43:$Vq1,46:$Vr1,49:162,58:160,59:161,61:$Vs1,62:$Vt1},{65:166,137:$Vd},{137:[2,29]},{16:[1,167]},o($VJ,[2,208]),o($VJ,[2,211],{145:168,77:$Vb}),{16:$Vu1,53:$Vv1,112:169},{19:[1,171],26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{19:[1,172]},{19:[1,173]},{19:[1,174]},{19:[1,175]},{16:$Vw1,24:[1,176],25:177},{16:$Vw1,25:179},{16:[1,181],30:180},{33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,44:$VQ,60:108,105:$VR,118:182,120:$VT,121:$VU,124:$VV},o($Vx1,[2,149]),o($Vx1,[2,150]),{93:[1,183]},{93:[1,184]},o($Vx1,$Vy1),o($Vx1,$Vz1),{36:[1,185]},o($Vx1,[2,160]),{36:[1,186]},{36:[1,187]},o($Vx1,$VA1),o($Vx1,[2,164]),{16:$VB1,65:190,122:188,137:$Vd},{93:[1,191]},{45:192,46:$VC1,47:193,49:194,62:$Vt1},o($Va,[2,35]),{16:$Ve,27:195,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:[1,196]},{16:$Ve,27:197,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:198,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:199,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:200,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:201,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:202,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:203,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:204,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:205,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:206,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:207,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:208,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:209,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:210,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:211,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:212,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:213,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:214,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:215,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:216,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:217,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:218,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:222,33:$VD1,34:$VE1,35:$VM,36:$Vh,37:66,39:$VN,40:$VO,44:$VF1,51:$Vj,53:$VG1,60:108,65:65,76:41,77:$Vk,78:$VH1,79:$VI1,80:$VJ1,81:$VK1,82:$VL1,83:$VM1,84:$VN1,85:$VO1,86:$VP1,87:$VQ1,88:$VR1,89:$VS1,90:$VT1,91:$VU1,92:$VV1,94:$VW1,96:$VX1,97:$VY1,98:$VZ1,99:$Vp,102:50,103:$Vq,105:$V_1,106:$V$1,108:$Vt,109:$Vu,110:$Vv,113:219,114:220,115:221,116:$V02,118:244,120:$VT,121:$VU,124:$VV,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($Vj1,[2,69]),{26:$VW,36:$VX,51:$VY,53:[1,249],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($V12,[2,71],{36:$VX,51:$VY,77:$VZ,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41}),o($V12,[2,72],{36:$VX,51:$VY,77:$VZ,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41}),o($V22,[2,79],{36:$VX,51:$VY,77:$VZ}),o($V22,[2,93],{36:$VX,51:$VY,77:$VZ}),o($V22,[2,94],{36:$VX,51:$VY,77:$VZ}),{16:$Ve,27:250,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:251,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:252,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($V22,[2,103],{36:$VX,51:$VY,77:$VZ}),{16:[1,253]},{16:[1,254]},{16:$Ve,27:255,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:256,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{38:[1,257]},{26:$VW,36:$VX,38:[2,206],48:[1,258],51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{46:[1,259]},{101:[1,260]},{101:[1,261]},{43:$Vq1,46:$Vr1,49:162,58:262,59:161,61:$Vs1,62:$Vt1},{16:[1,263]},{46:[1,264]},{46:[2,40],48:[1,265]},{50:[1,266]},{16:[1,267]},{43:[1,268]},{50:[2,45],63:[1,269]},{17:[1,270]},{19:[1,271]},o($VJ,[2,210]),{53:[1,272]},{23:273,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},o([5,15,16,33,34,36,42,44,50,51,54,55,62,64,67,71,74,77,78,79,84,98,99,103,105,106,108,109,110,111,125,126,127,128,129,130,131,132,137,138,139,140,141,142],[2,51]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),{23:274,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{16:[1,275]},{16:[2,26]},{16:[1,276]},{16:[1,278],31:277},{16:[2,27]},o($Vx1,[2,148]),{16:[1,280],77:[1,282],105:[1,281],123:279},{23:283,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{37:284,138:$VE,139:$VF},{37:285,138:$VE,139:$VF},{37:286,138:$VE,139:$VF},{46:[1,287]},{101:[1,288]},{101:[1,289]},{23:290,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,48:[1,291],60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{46:[1,292]},{46:[2,32],48:[1,293]},{50:[1,294]},{26:$VW,36:$VX,38:[1,295],51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($Vj1,[2,68]),o($V12,[2,73],{36:$VX,51:$VY,77:$VZ,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41}),o($V12,[2,74],{36:$VX,51:$VY,77:$VZ,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41}),o($V22,[2,75],{36:$VX,51:$VY,77:$VZ}),o($V22,[2,76],{36:$VX,51:$VY,77:$VZ}),o($V22,[2,77],{36:$VX,51:$VY,77:$VZ}),o($V22,[2,78],{36:$VX,51:$VY,77:$VZ}),o($V22,[2,80],{36:$VX,51:$VY,77:$VZ}),o([19,26,38,46,48,53,86,87,96,97,100,101,107],[2,81],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1}),o([19,26,38,46,48,53,87,96,97,100,101,107],[2,82],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1}),o($V32,[2,83],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41}),o($V32,[2,84],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41}),o($V42,[2,85],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,88:$V71,89:$V81}),o($V42,[2,86],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,88:$V71,89:$V81}),o($V42,[2,87],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,88:$V71,89:$V81}),o($V42,[2,88],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,88:$V71,89:$V81}),o($V52,[2,89],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1}),o($V52,[2,90],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1}),o([19,26,38,46,48,53,96,97,100,101,107],[2,91],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1}),o([19,26,38,46,48,53,97,100,101,107],[2,92],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1}),{26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,101:[1,296],107:$Vi1},o($V62,[2,101],{26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1}),o($V62,[2,102],{26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1}),{53:[1,297]},{48:[1,298],53:[2,120]},{48:[1,299],53:[2,121]},{26:$VW,36:$VX,48:[1,300],51:$VY,53:[2,122],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($V72,[2,124],{76:41,102:50,65:65,37:66,133:67,134:68,135:69,136:70,27:141,16:$Ve,33:$Vf,34:$Vg,36:$Vh,44:$Vi,51:$Vj,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI}),o($V72,[2,125],{76:41,102:50,65:65,37:66,133:67,134:68,135:69,136:70,27:140,16:$Ve,33:$Vf,34:$Vg,36:$Vh,44:$Vi,51:$Vj,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI}),o($V72,[2,126]),o($V72,[2,127]),o($V72,[2,128]),o($V72,[2,129]),o($V72,[2,130]),o($V72,[2,131],{76:41,102:50,65:65,37:66,133:67,134:68,135:69,136:70,27:142,16:$Ve,33:$Vf,34:$Vg,36:$Vh,44:$Vi,51:$Vj,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI}),o($V72,[2,132]),o($V72,[2,133]),o($V72,[2,134]),o($V72,[2,135]),o($V72,[2,136]),o($V72,[2,137]),o($V72,[2,138]),o($V72,[2,139]),o($V72,[2,140]),o($V72,[2,141]),o($V72,[2,142]),o($V72,[2,143],{76:41,102:50,65:65,37:66,133:67,134:68,135:69,136:70,27:143,16:$Ve,33:$Vf,34:$Vg,36:$Vh,44:$Vi,51:$Vj,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI}),{33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,44:$VQ,51:$Vl1,60:108,105:$VR,118:301,120:$VT,121:$VU,124:$VV},o($V72,[2,152]),o($V82,$VA1,{51:$Vk1}),o($V82,$Vy1,{51:$Vm1}),o($V82,$Vz1,{51:$Vn1}),{16:[1,302],65:303,122:188,137:$Vd,143:155},o($Vj1,[2,70]),{26:$VW,36:$VX,48:[1,304],51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{26:$VW,36:$VX,51:$VY,53:[1,305],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{26:$VW,36:$VX,51:$VY,53:[1,306],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{53:[1,307]},{53:[1,308]},{26:$VW,36:$VX,51:$VY,53:[1,309],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{26:$VW,36:$VX,51:$VY,53:[1,310],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($Vj1,[2,204]),{16:$Ve,27:154,33:$Vf,34:$Vg,36:$Vh,37:66,38:$Vo1,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI,144:311},o($Vj1,[2,199]),{16:$Ve,27:312,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:313,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{46:[1,314]},{44:[1,315]},{19:[1,316]},{43:$Vq1,46:$Vr1,49:162,58:317,59:161,61:$Vs1,62:$Vt1},{16:[1,318]},{44:[1,319]},{57:320,77:$Vb,132:$Vc,145:33},{50:[2,46]},{16:[1,321]},o($Va,[2,48]),{44:[1,322]},{48:[1,323],53:[2,112]},{19:[2,16]},{26:[1,324]},{19:[2,18],26:[1,325]},{32:326,33:[1,327],34:[1,328],35:[1,329],39:[1,330],40:[1,331]},o([33,34,35,39,40],[2,28]),{36:[1,333],77:[1,334],92:[1,332]},o($V92,[2,167]),{51:[1,335]},{16:[1,336]},{92:[1,337]},{38:[1,338]},{38:[1,339]},{38:[1,340]},o($Vx1,[2,165]),{23:341,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{23:342,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{48:[1,343]},{23:344,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{19:[1,345]},{45:346,46:$VC1,47:193,49:194,62:$Vt1},{16:[1,347]},o($Vj1,[2,67]),{16:$Ve,27:348,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($Vj1,[2,116]),{16:$Ve,27:222,33:$VD1,34:$VE1,35:$VM,36:$Vh,37:66,39:$VN,40:$VO,44:$VF1,51:$Vj,53:$VG1,60:108,65:65,76:41,77:$Vk,78:$VH1,79:$VI1,80:$VJ1,81:$VK1,82:$VL1,83:$VM1,84:$VN1,85:$VO1,86:$VP1,87:$VQ1,88:$VR1,89:$VS1,90:$VT1,91:$VU1,92:$VV1,94:$VW1,96:$VX1,97:$VY1,98:$VZ1,99:$Vp,102:50,103:$Vq,105:$V_1,106:$V$1,108:$Vt,109:$Vu,110:$Vv,113:349,114:220,115:221,116:$V02,118:244,120:$VT,121:$VU,124:$VV,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:222,33:$VD1,34:$VE1,35:$VM,36:$Vh,37:66,39:$VN,40:$VO,44:$VF1,51:$Vj,53:$VG1,60:108,65:65,76:41,77:$Vk,78:$VH1,79:$VI1,80:$VJ1,81:$VK1,82:$VL1,83:$VM1,84:$VN1,85:$VO1,86:$VP1,87:$VQ1,88:$VR1,89:$VS1,90:$VT1,91:$VU1,92:$VV1,94:$VW1,96:$VX1,97:$VY1,98:$VZ1,99:$Vp,102:50,103:$Vq,105:$V_1,106:$V$1,108:$Vt,109:$Vu,110:$Vv,113:350,114:220,115:221,116:$V02,118:244,120:$VT,121:$VU,124:$VV,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:222,33:$VD1,34:$VE1,35:$VM,36:$Vh,37:66,39:$VN,40:$VO,44:$VF1,51:$Vj,53:$VG1,60:108,65:65,76:41,77:$Vk,78:$VH1,79:$VI1,80:$VJ1,81:$VK1,82:$VL1,83:$VM1,84:$VN1,85:$VO1,86:$VP1,87:$VQ1,88:$VR1,89:$VS1,90:$VT1,91:$VU1,92:$VV1,94:$VW1,96:$VX1,97:$VY1,98:$VZ1,99:$Vp,102:50,103:$Vq,105:$V_1,106:$V$1,108:$Vt,109:$Vu,110:$Vv,113:351,114:220,115:221,116:$V02,118:244,120:$VT,121:$VU,124:$VV,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($V72,[2,151]),{101:[1,352]},{101:[1,353]},{16:[1,355],51:[1,356],104:354},o($Vj1,[2,99]),o($Vj1,[2,100]),o($Vj1,[2,104]),o($Vj1,[2,105]),o($Vj1,[2,114]),o($Vj1,[2,115]),{38:[2,205]},{26:$VW,36:$VX,46:[2,202],48:[1,357],51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{26:$VW,36:$VX,46:[2,203],48:[1,358],51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{19:[1,359]},{43:$Vq1,46:$Vr1,49:162,58:360,59:161,61:$Vs1,62:$Vt1},o($Va,[2,38]),{46:[2,39]},{51:[1,361]},{45:362,46:$VC1,47:193,49:194,62:$Vt1},o($Va2,[2,44]),{19:[1,363]},o($Vb2,$Vc2,{68:364,66:365,9:366,67:$V7}),{16:$Vu1,53:$Vv1,112:367},{16:$Ve,27:368,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:369,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{19:[2,20]},{19:[2,21]},{19:[2,22]},{36:[1,370]},{36:[1,371]},{36:[1,372]},o($Vx1,[2,166]),{16:$Ve,27:373,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:[1,374]},{16:$Ve,27:375,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($V92,[2,171]),{36:[1,376]},o($Vx1,[2,159]),o($Vx1,[2,161]),o($Vx1,[2,162]),{46:[2,177],48:[1,377]},{46:[2,178],48:[1,378]},{23:379,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,92:[1,380],105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{92:[1,381]},o($Va,[2,30]),{46:[2,31]},{51:[1,382]},o([19,26,38,46,48,53,101,107],[2,95],{36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1}),{53:[2,117]},{53:[2,118]},{53:[2,119]},{16:$Ve,23:341,27:312,33:$VD1,34:$VE1,35:$VM,36:$Vh,37:66,39:$VN,40:$VO,43:$VP,44:$VF1,51:$Vj,60:108,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$V_1,106:$Vd2,108:$Vt,109:$Vu,110:$Vv,118:98,119:97,120:$VT,121:$VU,124:$VV,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,23:342,27:313,33:$VD1,34:$VE1,35:$VM,36:$Vh,37:66,39:$VN,40:$VO,43:$VP,44:$VF1,51:$Vj,60:108,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$V_1,106:$Vd2,108:$Vt,109:$Vu,110:$Vv,118:98,119:97,120:$VT,121:$VU,124:$VV,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{53:[1,384]},{53:[1,385]},{16:$Ve2,53:$Vf2,117:386},{16:$Vp1,65:157,137:$Vd,143:388},{16:$Vp1,65:157,137:$Vd,143:389},o($Va,[2,36]),{46:[1,390]},{23:392,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,52:391,53:$Vg2,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{46:[1,393]},o($Va,[2,47]),{46:[1,394]},{8:399,16:$Ve,27:397,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,50:$V9,51:$Vj,65:65,69:395,70:396,71:$Vh2,74:$Vi2,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($Vb2,$Vc2,{9:366,66:401,67:$V7}),{53:[2,111]},{19:[2,17],26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{19:[2,19],26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{37:402,138:$VE,139:$VF},{37:403,138:$VE,139:$VF},{37:404,138:$VE,139:$VF},{26:$VW,36:$VX,38:[1,405],51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($V92,[2,170]),{26:$VW,36:$VX,51:$VY,53:[1,406],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{37:407,138:$VE,139:$VF},{16:$VB1,65:190,122:408,137:$Vd},{16:$VB1,65:190,122:409,137:$Vd},{92:[1,410]},o($Vx1,[2,173]),o($Vx1,[2,174]),{23:392,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,52:411,53:$Vg2,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,44:$VQ,51:$Vl1,60:108,105:$VR,118:182,120:$VT,121:$VU,124:$VV},o($Vj1,[2,97]),o($Vj1,[2,98]),{53:[1,412]},{48:[1,413],53:[2,146]},{46:[2,200]},{46:[2,201]},{19:[1,414]},{53:[1,415]},{48:[1,416],53:[2,154]},o($Va2,[2,43]),o([5,15,16,33,34,36,42,44,46,50,51,54,55,62,64,67,71,74,77,78,79,84,98,99,103,105,106,108,109,110,111,125,126,127,128,129,130,131,132,137,138,139,140,141,142],[2,110]),{46:[2,52]},{8:399,16:$Ve,27:397,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,46:[2,54],50:$V9,51:$Vj,65:65,69:417,70:396,71:$Vh2,74:$Vi2,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{19:[1,418],26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{51:[1,419]},o($Vj2,[2,59]),{16:$Ve,27:420,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},o($Vb2,[2,49]),{38:[1,421]},{38:[1,422]},{38:[1,423]},o($V92,[2,169]),o($V92,[2,168]),{38:[1,424]},{46:[2,175]},{46:[2,176]},o($Vx1,[2,172]),{53:[1,425]},{24:[1,426]},{16:$Ve2,53:$Vf2,117:427},o($Va,[2,37]),{24:[1,428]},{23:392,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,52:429,53:$Vg2,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},{46:[2,53]},{8:399,16:$Ve,27:397,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,46:[2,56],50:$V9,51:$Vj,65:65,69:430,70:396,71:$Vh2,74:$Vi2,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{16:$Ve,27:431,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{19:[1,432],26:$VW,36:$VX,51:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{19:[2,23]},{19:[2,24]},{19:[2,25]},o($Vx1,[2,156]),{24:[1,433]},{44:[1,434]},{53:[2,145]},{60:435,124:$VV},{53:[2,153]},{46:[2,55]},{26:$VW,36:$VX,51:$VY,53:[1,436],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($Vj2,[2,60]),{23:437,33:$VK,34:$VL,35:$VM,39:$VN,40:$VO,43:$VP,44:$VQ,60:108,105:$VR,106:$VS,118:98,119:97,120:$VT,121:$VU,124:$VV},o($Vb2,$Vc2,{66:365,9:366,68:438,67:$V7}),o($Va2,[2,42]),{44:[1,439]},o($Va2,[2,34]),{46:[1,440]},o($Vb2,$Vc2,{66:365,9:366,68:441,67:$V7}),{53:[2,144]},{46:[1,442]},o($Vj2,$Vk2,{72:443,73:444,75:[1,445]}),o($Vj2,$Vk2,{73:446,75:[1,447]}),o($Vj2,[2,58]),{44:$Vl2,71:[1,448]},o($Vj2,[2,57]),{44:$Vl2,71:[1,450]},{51:[1,451]},o($Vb2,$Vc2,{66:365,9:366,68:452,67:$V7}),{51:[1,453]},{16:$Ve,27:454,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{46:[1,455]},{16:$Ve,27:456,33:$Vf,34:$Vg,36:$Vh,37:66,44:$Vi,51:$Vj,65:65,76:41,77:$Vk,78:$Vl,79:$Vm,84:$Vn,98:$Vo,99:$Vp,102:50,103:$Vq,105:$Vr,106:$Vs,108:$Vt,109:$Vu,110:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:$VA,130:$VB,131:$VC,132:$VD,133:67,134:68,135:69,136:70,137:$Vd,138:$VE,139:$VF,140:$VG,141:$VH,142:$VI},{26:$VW,36:$VX,51:$VY,53:[1,457],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},o($Vj2,[2,63]),{26:$VW,36:$VX,51:$VY,53:[1,458],77:$VZ,78:$V_,79:$V$,80:$V01,81:$V11,82:$V21,83:$V31,85:$V41,86:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,100:$Vh1,107:$Vi1},{44:[1,459]},{44:[1,460]},o($Vb2,$Vc2,{66:365,9:366,68:461,67:$V7}),o($Vb2,$Vc2,{66:365,9:366,68:462,67:$V7}),{46:[1,463]},{46:[1,464]},o($Vm2,[2,62]),o($Vm2,[2,61])],
defaultActions: {3:[2,2],13:[2,108],20:[2,1],21:[2,3],24:[2,106],83:[2,29],178:[2,26],181:[2,27],269:[2,46],274:[2,16],311:[2,205],317:[2,39],326:[2,20],327:[2,21],328:[2,22],346:[2,31],349:[2,117],350:[2,118],351:[2,119],367:[2,111],388:[2,200],389:[2,201],395:[2,52],408:[2,175],409:[2,176],417:[2,53],421:[2,23],422:[2,24],423:[2,25],427:[2,145],429:[2,153],430:[2,55],440:[2,144]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function prependChild(node, child){
        node.unshift(child);
        return node;
    }
    function getLine(v) {
        if (typeof v == 'number') return v;
        return v.first_line;
    }
    function parseError(yy, opts) {
        var expected = opts.expected ? `Expecting ${opts.expected}` : '';
        yy.parser.parseError(`Parse error on line ${opts.line}:\n${yy.lexer.showPosition()}\n${expected}`, {});
    }
    function expectText(yy, lineno, desired, actual) {
        if (desired == actual) return;
        parseError(yy, {
             line: lineno,
             expected:`'${desired}' not '${actual}'`
        });
    }
    function hexStringToBuffer(str) {
        if (str.length % 2 == 1) str='0'+str;
        return Buffer.from(str,'hex');
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 64;
break;
case 2:return 67;
break;
case 3:return 111;
break;
case 4:return 62;
break;
case 5:return 63;
break;
case 6:return 50;
break;
case 7:return 15;
break;
case 8:return 55;
break;
case 9:return 56;
break;
case 10:return 42;
break;
case 11:return 'USE';
break;
case 12:return 17;
break;
case 13:return 43;
break;
case 14:return 54;
break;
case 15:return 61;
break;
case 16:return 28;
break;
case 17:return 29;
break;
case 18:return 71;
break;
case 19:return 75;
break;
case 20:return 74;
break;
case 21:return 103;
break;
case 22:return 109;
break;
case 23:return 110;
break;
case 24:return 120;
break;
case 25:return 33;
break;
case 26:return 34;
break;
case 27:return 121;
break;
case 28:return 40;
break;
case 29:return 39;
break;
case 30:return 39;
break;
case 31:return 105;
break;
case 32:return 124;
break;
case 33:return 35;
break;
case 34:return 106;
break;
case 35:return 108;
break;
case 36:return 140;
break;
case 37:return 141;
break;
case 38:return 131;
break;
case 39:return 125;
break;
case 40:return 126;
break;
case 41:return 127;
break;
case 42:return 128;
break;
case 43:return 129;
break;
case 44:return 130;
break;
case 45:return 138;
break;
case 46:return 139;
break;
case 47:return 142;
break;
case 48:return 132;
break;
case 49:return 16;
break;
case 50:return 137;
break;
case 51:return 79;
break;
case 52:return 78;
break;
case 53:return 80;
break;
case 54:return 81;
break;
case 55:return 82;
break;
case 56:return 83;
break;
case 57:return 85;
break;
case 58:return 84;
break;
case 59:return 86;
break;
case 60:return 87;
break;
case 61:return 88;
break;
case 62:return 89;
break;
case 63:return 90;
break;
case 64:return 91;
break;
case 65:return 92;
break;
case 66:return 93;
break;
case 67:return 94;
break;
case 68:return 95;
break;
case 69:return 107;
break;
case 70:return 26;
break;
case 71:return 96;
break;
case 72:return 97;
break;
case 73:return 98;
break;
case 74:return 99;
break;
case 75:return 77;
break;
case 76:return 101;
break;
case 77:return 19;
break;
case 78:return 48;
break;
case 79:return 51;
break;
case 80:return 53;
break;
case 81:return 44;
break;
case 82:return 46;
break;
case 83:return 36;
break;
case 84:return 38;
break;
case 85:return 100;
break;
case 86:return 24;
break;
case 87:/* skip whitespace */
break;
case 88:return 'UNKNOWN';
break;
case 89:return 5;
break;
case 90:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:import)/,/^(?:const)/,/^(?:private)/,/^(?:public)/,/^(?:readonly)/,/^(?:function)/,/^(?:persist)/,/^(?:declare)/,/^(?:extern)/,/^(?:define)/,/^(?:use)/,/^(?:as)/,/^(?:trait)/,/^(?:implement)/,/^(?:implements)/,/^(?:fungible-token)/,/^(?:nonfungible-token)/,/^(?:if)/,/^(?:else)/,/^(?:return)/,/^(?:foreach)/,/^(?:_countof)/,/^(?:_typeof)/,/^(?:list)/,/^(?:int)/,/^(?:uint)/,/^(?:bool)/,/^(?:string-ascii)/,/^(?:string-utf8)/,/^(?:string)/,/^(?:principal)/,/^(?:response)/,/^(?:buff)/,/^(?:optional)/,/^(?:delete)/,/^(?:true)/,/^(?:false)/,/^(?:none)/,/^(?:contract-caller)/,/^(?:tx-sender)/,/^(?:block-height)/,/^(?:burn-block-height)/,/^(?:stx-liquid-supply)/,/^(?:is-in-regtest)/,/^(?:([0-9])+)/,/^(?:u([0-9])+)/,/^(?:0x([0-9A-Fa-f])*)/,/^(?:([S][A-Z0-9]{39,40}))/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*[!?]{0,1}))/,/^(?:("(?:[^"\\]|\\.)*"))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\*\*)/,/^(?:\^)/,/^(?:~)/,/^(?:&)/,/^(?:\|)/,/^(?:<<)/,/^(?:>>)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\?=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:#)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:=>)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crystalAst;
exports.Parser = crystalAst.Parser;
exports.parse = function () { return crystalAst.parse.apply(crystalAst, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}