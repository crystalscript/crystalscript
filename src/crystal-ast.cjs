/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crystalAst = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,24],$V2=[1,18],$V3=[1,62],$V4=[2,109],$V5=[1,26],$V6=[1,19],$V7=[1,20],$V8=[1,14],$V9=[1,21],$Va=[1,16],$Vb=[1,22],$Vc=[1,61],$Vd=[1,25],$Ve=[1,27],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,37],$Vo=[1,38],$Vp=[1,15],$Vq=[1,53],$Vr=[1,54],$Vs=[1,39],$Vt=[1,40],$Vu=[1,41],$Vv=[1,42],$Vw=[1,43],$Vx=[1,44],$Vy=[1,45],$Vz=[1,46],$VA=[1,55],$VB=[1,56],$VC=[1,57],$VD=[1,58],$VE=[1,59],$VF=[1,60],$VG=[1,66],$VH=[5,19,20,37,39,45,46,49,50,57,59,62,67,72,74,75,76,81,95,96,100,102,103,105,106,107,108,110,111,127,128,129,130,131,132,133,134,139,140,141,142,143,144],$VI=[1,93],$VJ=[1,90],$VK=[1,92],$VL=[1,68],$VM=[1,69],$VN=[1,71],$VO=[1,70],$VP=[1,72],$VQ=[1,73],$VR=[1,74],$VS=[1,75],$VT=[1,76],$VU=[1,77],$VV=[1,78],$VW=[1,79],$VX=[1,80],$VY=[1,81],$VZ=[1,82],$V_=[1,83],$V$=[1,84],$V01=[1,85],$V11=[1,86],$V21=[1,87],$V31=[1,88],$V41=[1,89],$V51=[1,91],$V61=[1,104],$V71=[1,102],$V81=[18,29,41,43,46,48,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,104],$V91=[1,114],$Va1=[1,115],$Vb1=[1,119],$Vc1=[1,120],$Vd1=[2,207],$Ve1=[1,124],$Vf1=[1,127],$Vg1=[1,187],$Vh1=[2,123],$Vi1=[1,157],$Vj1=[1,156],$Vk1=[1,158],$Vl1=[1,159],$Vm1=[1,160],$Vn1=[1,161],$Vo1=[1,163],$Vp1=[1,162],$Vq1=[1,164],$Vr1=[1,165],$Vs1=[1,166],$Vt1=[1,167],$Vu1=[1,168],$Vv1=[1,169],$Vw1=[1,170],$Vx1=[1,172],$Vy1=[1,173],$Vz1=[1,174],$VA1=[1,175],$VB1=[1,178],$VC1=[1,176],$VD1=[1,180],$VE1=[1,181],$VF1=[1,171],$VG1=[1,179],$VH1=[1,182],$VI1=[1,183],$VJ1=[1,184],$VK1=[1,185],$VL1=[1,188],$VM1=[5,18,19,20,37,39,41,45,46,49,50,57,59,62,66,67,72,74,75,76,81,95,96,100,102,103,105,106,107,108,110,111,127,128,129,130,131,132,133,134,139,140,141,142,143,144],$VN1=[20,21,39,41,43],$VO1=[18,29,41,43,48,73,75,76,83,84,85,86,87,88,89,90,91,92,93,94,97,98,104],$VP1=[18,29,41,43,48,73,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,104],$VQ1=[18,29,41,43,48,73,83,84,85,86,87,88,89,90,91,92,93,94,97,98,104],$VR1=[18,29,41,43,48,73,83,84,87,88,89,90,91,92,93,94,97,98,104],$VS1=[18,29,41,43,48,73,83,84,91,92,93,94,97,98,104],$VT1=[18,41,43,48,73,98],$VU1=[43,48],$VV1=[1,225],$VW1=[1,224],$VX1=[1,222],$VY1=[1,223],$VZ1=[41,43,48],$V_1=[2,163],$V$1=[2,157],$V02=[2,158],$V12=[18,20,27,41,43,48,89],$V22=[1,245],$V32=[1,242],$V42=[1,253],$V52=[2,41],$V62=[1,254],$V72=[1,255],$V82=[1,271],$V92=[2,113],$Va2=[1,276],$Vb2=[1,294],$Vc2=[2,33],$Vd2=[1,328],$Ve2=[20,39,45,46,66,67,72,74,75,76,81,95,96,100,102,103,105,106,107,110,111,127,128,129,130,131,132,133,134,139,140,141,142,143,144],$Vf2=[2,50],$Vg2=[1,358],$Vh2=[2,147],$Vi2=[72,74,89],$Vj2=[41,43],$Vk2=[1,392],$Vl2=[2,155],$Vm2=[5,19,20,37,39,41,45,46,49,50,57,59,62,66,67,72,74,75,76,81,95,96,100,102,103,105,106,107,108,110,111,127,128,129,130,131,132,133,134,139,140,141,142,143,144],$Vn2=[2,64],$Vo2=[20,39,41,45,46,66,67,72,74,75,76,81,95,96,100,102,103,105,106,107,110,111,127,128,129,130,131,132,133,134,139,140,141,142,143,144],$Vp2=[1,431],$Vq2=[5,19,20,37,39,41,45,46,49,50,57,59,62,66,67,70,72,74,75,76,81,95,96,100,102,103,105,106,107,108,110,111,127,128,129,130,131,132,133,134,139,140,141,142,143,144];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"prog":3,"definitions":4,"ENDOFFILE":5,"definition":6,"visibility":7,"func_def":8,"const":9,"persist":10,"define_trait":11,"implement_trait":12,"declare_extern":13,"import_file":14,"if_stmt":15,"expr":16,"line_termination":17,"SEMICOLON":18,"PERSIST":19,"ID":20,"AS":21,"persist_map_def":22,"persist_var_def":23,"persist_fungible_token_def":24,"persist_nonfungible_token_def":25,"type":26,"ARROW":27,"txt_with":28,"ASSIGNMENT":29,"FUNGIBLE_TOKEN":30,"NONFUNGIBLE_TOKEN":31,"txt_identified":32,"txt_by":33,"asset_id_type":34,"actual_type":35,"txt_from":36,"DEFINE":37,"TRAIT":38,"LBRACE":39,"trait_items":40,"RBRACE":41,"trait_item":42,"COMMA":43,"public_visibility":44,"FUNCTION":45,"LPAREN":46,"type_list":47,"RPAREN":48,"IMPLEMENT":49,"DECLARE":50,"EXTERN":51,"contract_id":52,"extern_contract_defs":53,"extern_contract_def":54,"response_type":55,"IMPLEMENTS":56,"PUBLIC":57,"READONLY":58,"IMPORT":59,"string_literal":60,"consts":61,"CONST":62,"consts_then_stmts":63,"stmts":64,"stmt":65,"RETURN":66,"IF":67,"elseif":68,"else":69,"ELSE":70,"literal":71,"LBRACKET":72,"RBRACKET":73,"DOT":74,"MINUS":75,"PLUS":76,"MULTIPLY":77,"DIVIDE":78,"MOD":79,"POW":80,"BIT_NOT":81,"BIT_XOR":82,"BIT_AND":83,"BIT_OR":84,"BIT_SHIFT_LEFT":85,"BIT_SHIFT_RIGHT":86,"GTE":87,"LTE":88,"GT":89,"LT":90,"EQUALS":91,"NOTEQUALS":92,"AND":93,"OR":94,"NOT":95,"UNWRAP":96,"EXPR_IF":97,"COLON":98,"func_call":99,"FOREACH":100,"anon_func_def":101,"PRINCIPAL":102,"OPTIONAL":103,"INSERT_ASSIGNMENT":104,"DELETE":105,"COUNTOF":106,"TYPEOF":107,"PRIVATE":108,"func_args_def":109,"INT":110,"UINT":111,"func_args":112,"operator":113,"serializable_type":114,"LE":115,"anon_func_args_def":116,"trait_type":117,"LIST":118,"int_literal":119,"BUFF":120,"BOOL":121,"STRING":122,"STRING-ASCII":123,"mapkeysdef":124,"trait_itemtype":125,"RESPONSE":126,"CONTRACT-CALLER":127,"TX-SENDER":128,"BLOCK-HEIGHT":129,"BURN-BLOCK-HEIGHT":130,"STX-LIQUID-SUPPLY":131,"IS-IN-REGTEST":132,"NONE":133,"STX_ADDRESS":134,"bool_literal":135,"buff_literal":136,"list_literal":137,"map_literal":138,"QUOTED-STRING":139,"INT_LITERAL":140,"UINT_LITERAL":141,"TRUE":142,"FALSE":143,"HEX_NUMBER":144,"map_literal_vals":145,"list_literal_vals":146,"contract_id_relative":147,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",18:"SEMICOLON",19:"PERSIST",20:"ID",21:"AS",27:"ARROW",29:"ASSIGNMENT",30:"FUNGIBLE_TOKEN",31:"NONFUNGIBLE_TOKEN",37:"DEFINE",38:"TRAIT",39:"LBRACE",41:"RBRACE",43:"COMMA",45:"FUNCTION",46:"LPAREN",48:"RPAREN",49:"IMPLEMENT",50:"DECLARE",51:"EXTERN",56:"IMPLEMENTS",57:"PUBLIC",58:"READONLY",59:"IMPORT",62:"CONST",66:"RETURN",67:"IF",70:"ELSE",72:"LBRACKET",73:"RBRACKET",74:"DOT",75:"MINUS",76:"PLUS",77:"MULTIPLY",78:"DIVIDE",79:"MOD",80:"POW",81:"BIT_NOT",82:"BIT_XOR",83:"BIT_AND",84:"BIT_OR",85:"BIT_SHIFT_LEFT",86:"BIT_SHIFT_RIGHT",87:"GTE",88:"LTE",89:"GT",90:"LT",91:"EQUALS",92:"NOTEQUALS",93:"AND",94:"OR",95:"NOT",96:"UNWRAP",97:"EXPR_IF",98:"COLON",100:"FOREACH",102:"PRINCIPAL",103:"OPTIONAL",104:"INSERT_ASSIGNMENT",105:"DELETE",106:"COUNTOF",107:"TYPEOF",108:"PRIVATE",110:"INT",111:"UINT",115:"LE",118:"LIST",120:"BUFF",121:"BOOL",122:"STRING",123:"STRING-ASCII",126:"RESPONSE",127:"CONTRACT-CALLER",128:"TX-SENDER",129:"BLOCK-HEIGHT",130:"BURN-BLOCK-HEIGHT",131:"STX-LIQUID-SUPPLY",132:"IS-IN-REGTEST",133:"NONE",134:"STX_ADDRESS",139:"QUOTED-STRING",140:"INT_LITERAL",141:"UINT_LITERAL",142:"TRUE",143:"FALSE",144:"HEX_NUMBER"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[17,2],[17,1],[10,5],[10,5],[10,5],[10,5],[22,3],[23,5],[24,3],[24,5],[25,4],[34,1],[28,1],[32,1],[33,1],[36,1],[11,7],[40,3],[40,1],[40,0],[42,8],[12,4],[13,7],[13,9],[13,6],[53,3],[53,1],[53,0],[54,8],[54,5],[54,3],[44,1],[44,2],[14,7],[14,5],[61,2],[61,0],[9,5],[63,2],[64,2],[64,1],[65,1],[65,2],[65,1],[65,3],[15,9],[15,8],[68,9],[68,8],[69,4],[69,0],[16,1],[16,1],[16,4],[16,3],[16,2],[16,3],[16,2],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,2],[16,5],[16,1],[16,6],[16,6],[16,4],[16,4],[16,3],[16,3],[16,2],[16,4],[16,4],[7,2],[7,1],[7,1],[7,0],[8,8],[109,4],[109,2],[109,0],[99,4],[99,4],[99,4],[112,3],[112,3],[112,3],[112,1],[112,1],[112,1],[112,0],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[101,7],[116,3],[116,1],[116,0],[26,2],[26,1],[26,1],[114,2],[114,1],[47,3],[47,1],[47,0],[35,7],[35,1],[35,1],[35,4],[35,1],[35,4],[35,4],[35,1],[35,1],[35,3],[117,4],[125,1],[125,4],[125,4],[125,3],[125,2],[55,6],[55,5],[55,5],[124,5],[124,5],[124,3],[124,3],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[60,1],[119,1],[119,1],[135,1],[135,1],[136,1],[138,3],[145,5],[145,5],[145,3],[145,3],[137,3],[146,3],[146,1],[146,0],[52,2],[52,1],[147,3],[147,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return []; 
break;
case 3:
 this.$ = prependChild($$[$0],$$[$0-1]); 
break;
case 4: case 122:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; this.$.vis = $$[$0-1]; 
break;
case 13: case 56: case 63: case 70:
 this.$ = $$[$0-1]; 
break;
case 16:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datamap', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 17:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'datavar', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 18:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'ft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 19:
 this.$=$$[$0-1]; Object.assign(this.$, { op:'persist', access:'nft', protect:'const', id:$$[$0-3], line:getLine(this._$) }); 
break;
case 20:
 this.$ = { type:'datamap', keytype:$$[$0-2], valtype:$$[$0], line:getLine(this._$) }; 
break;
case 21:
 expectText(yy, yylineno, 'initial-value', $$[$0-2]); this.$ = {  initial_val:$$[$0], line:getLine(this._$) }; Object.assign(this.$, $$[$0-4]); 
break;
case 22:
 expectText(yy, yylineno, 'unlimited-supply', $$[$0]); this.$ = {  type:'ft', total_supply:null, line:getLine(this._$) }; 
break;
case 23:
 expectText(yy, yylineno, 'total-supply', $$[$0-2]); this.$ = {  type:'ft', total_supply:$$[$0], line:getLine(this._$) }; 
break;
case 24:
 this.$ = { type:'nft', tokenidtype: $$[$0], line:getLine(this._$) }; 
break;
case 26:
 expectText(yy, yylineno, 'with', $$[$0]); 
break;
case 27:
 expectText(yy, yylineno, 'identified', $$[$0]); 
break;
case 28:
 expectText(yy, yylineno, 'by', $$[$0]); 
break;
case 29:
 expectText(yy, yylineno, 'from', $$[$0]); 
break;
case 30:
 this.$= { op:'trait_def', id:$$[$0-4], traits:$$[$0-2], line:getLine(this._$) }; 
break;
case 31: case 39:
 this.$=prependChild($$[$0], $$[$0-2]); 
break;
case 32: case 40:
 this.$=[$$[$0]]; 
break;
case 33: case 41: case 50:
 this.$=[]; 
break;
case 34:
 this.$={op:'extern_func_def', vis:$$[$0-7], name:$$[$0-5], args:$$[$0-3] }; Object.assign(this.$, $$[$0]); 
break;
case 35:
 this.$={ op:'impl_trait', expr:$$[$0-1], line:getLine(this._$) }; 
break;
case 36:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:$$[$0-4], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 37:
 this.$={ op:'declare_extern', type:'extern_decl', id:$$[$0-4], protect:'const', access:'contract', contract_id:$$[$0-6], defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 38:
 this.$={ op:'declare_extern', type:'extern_decl', id:null, protect:'const', access:'contract', contract_id:null, defs:$$[$0-2], line:getLine(this._$) }; 
break;
case 42:
 this.$=Object.assign({ op:'extern_func_def', name:$$[$0-5], vis:$$[$0-7], args:$$[$0-3], contract_id:null, line:getLine(this._$) }, $$[$0]); 
break;
case 43:
 this.$={ op:'extern_trait_def', id:$$[$0-3], traits:$$[$0-1], contract_id:null }; 
break;
case 44:
 this.$={ op:'extern_trait_def_impl', impl_contract_id:$$[$0], contract_id:null }; 
break;
case 46:
 this.$='read-only' 
break;
case 47:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:$$[$0-5], as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 48:
 this.$={ op:'import', file:$$[$0-3].val, contract_id:null, as_id:$$[$0-1], line:getLine(this._$) }; 
break;
case 49:
 this.$=prependChild($$[$0], $$[$0-1]); 
break;
case 51:
 this.$ = { op:'vardecl', id:$$[$0-3], protect:'const', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 52:
 this.$ = $$[$0-1]; this.$.push.apply(this.$, $$[$0]); 
break;
case 53:
 this.$ = prependChild($$[$0], $$[$0-1]); 
break;
case 54: case 154:
 this.$ = [ $$[$0] ]; 
break;
case 57:
 this.$ = $$[$0]; this.$.vis='private'; 
break;
case 58:
 this.$ = { op:'return', type:null, line:getLine(this._$), expr:$$[$0-1] }; 
break;
case 59:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-6], body:$$[$0-3], elsif:$$[$0-1], else_body: $$[$0] }; 
break;
case 60:
 this.$ = { op:'if', line:getLine(this._$), expr:$$[$0-5], body:$$[$0-2], else_body: $$[$0] }; 
break;
case 61:
 this.$ = $$[$0-8]; this.$.push({ expr:$$[$0-4], body:$$[$0-1]}); 
break;
case 62:
 this.$ = [{ expr:$$[$0-4], body:$$[$0-1] }]; 
break;
case 64:
 this.$ = null; 
break;
case 66: case 167:
 this.$={ op:'id', type:null, line:getLine(this._$), id:$$[$0] }; 
break;
case 67: case 169:
 this.$ = { op:'[]', type:null, line:getLine(this._$), expr:$$[$0-3], bracket:$$[$0-1] }; 
break;
case 68: case 170:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:$$[$0-2] }; 
break;
case 69: case 171:
 this.$ = { op:'.', type:null, line:getLine(this._$), bracket:{ op:'lit',type:'string', val:$$[$0] }, expr:null }; 
break;
case 71:
 this.$ = { op:'sign-', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 72:
 this.$ = { op:'sign+', type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 73: case 74: case 75: case 76: case 91: case 92:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), multi:[$$[$0-2], $$[$0]] }; 
break;
case 77: case 78: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0-2], b:$$[$0] }; 
break;
case 79: case 93: case 94:
 this.$ = { op:$$[$0-1], type:null, line:getLine(this._$), a:$$[$0] }; 
break;
case 95:
 this.$ = { op:'expr_if', type:null, line:getLine(this._$), expr:$$[$0-4], a:$$[$0-2], b:$$[$0] }; 
break;
case 96:
 this.$ = $$[$0]; 
break;
case 97:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:$$[$0-1], line:getLine(this._$) }; $$[$0-1].genesis_op = 'foreach'; 
break;
case 98:
 this.$ = { op:'foreach', type:null, itemtype:null, a:$$[$0-3], b:{op:'id',id:$$[$0-1],type:null}, line:getLine(this._$) }; 
break;
case 99: case 168:
 this.$ = { op:'principal', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 100:
 this.$ = { op:'optional', type:null, itemtype:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 101:
 this.$ = { op:'=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 102:
 this.$ = { op:'?=', lval:$$[$0-2], rval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 103:
 this.$ = { op:'delete', lval:$$[$0], type:null, line:getLine(this._$) }; 
break;
case 104:
 this.$ = { op:'_countof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 105:
 this.$ = { op:'_typeof', id:{op:'id', id:$$[$0-1], type:null}, line:getLine(this._$) }; 
break;
case 106:
 this.$ = 'read-only'; 
break;
case 107:
 this.$ = 'public'; 
break;
case 108: case 109:
 this.$ = 'private'; 
break;
case 110:
 this.$ = { op:'func_def', vis:null, name:$$[$0-6], type:null, line:getLine(this._$), args:$$[$0-4], body:$$[$0-1], }; 
break;
case 111:
 this.$ = prependChild($$[$0], Object.assign({name:$$[$0-3], protect:'const'}, $$[$0-2])); 
break;
case 112:
 this.$ = [Object.assign({name:$$[$0-1], protect:'const'}, $$[$0])]; 
break;
case 113: case 123: case 147: case 155: case 207:
 this.$ = []; 
break;
case 114:
 this.$ = { op:'int', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 115:
 this.$ = { op:'uint', type:null, line:getLine(this._$), a:$$[$0-1] }; 
break;
case 116:
 this.$ = { op:'func_call', name:$$[$0-3], type:null, line:getLine(this._$), args:$$[$0-1] }; 
break;
case 117:
 this.$ = prependChild($$[$0], { op:'id', id:$$[$0-2] }); 
break;
case 118:
 this.$ = prependChild($$[$0], { op:'lit', type:'typedef', typedef:$$[$0-2] }); 
break;
case 119: case 153: case 205:
 this.$ = prependChild($$[$0], $$[$0-2]); 
break;
case 120:
 this.$ = [{ op:'id', id:$$[$0] }]; 
break;
case 121:
 this.$ = [{ op:'lit', type:'typedef', typedef:$$[$0] }]; 
break;
case 144:
 this.$= { op:'anon_func_def', vis:'private', args:$$[$0-5], body:$$[$0-1], type:null, line:getLine(this._$) }; 
break;
case 145:
 this.$ = prependChild($$[$0], { name:$$[$0-2], protect:'const' }); 
break;
case 146:
 this.$ = [{ name:$$[$0], protect:'const' }]; 
break;
case 148: case 151:
 this.$ = { type:'optional', itemtype:$$[$0], line:getLine(this._$) }; 
break;
case 156:
 this.$ = { type:'list', line:getLine(this._$), itemtype:$$[$0-4], size:$$[$0-1].val }; 
break;
case 157:
 this.$ = { type:'int', line:getLine(this._$) }; 
break;
case 158:
 this.$ = { type:'uint', line:getLine(this._$) }; 
break;
case 159:
 this.$ = { type:'buff', line:getLine(this._$), size:$$[$0-1].val }; 
break;
case 160:
 this.$ = { type:'bool', line:getLine(this._$) }; 
break;
case 161:
 this.$ = { type:'string', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 162:
 this.$ = { type:'string-ascii', line:getLine(this._$), size:$$[$0-1].val }; if ($$[$0-1].val < 0) throw new Error('index cannot be negative'); 
break;
case 163:
 this.$ = { type:'principal', line:getLine(this._$) }; 
break;
case 165:
 this.$ = { type:'map', line:getLine(this._$), maptype:$$[$0-1] }; 
break;
case 166:
 this.$ = { type:'trait', itemtype:$$[$0-1], line:getLine(this._$) }; 
break;
case 172:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-3], errtype:$$[$0-1] }; 
break;
case 173:
 this.$ = { type:'response', line:getLine(this._$), oktype:$$[$0-2] }; 
break;
case 174:
 this.$ = { type:'response', line:getLine(this._$),  errtype:$$[$0-1] }; 
break;
case 175: case 200:
 this.$ = {}; this.$[$$[$0-4]] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 176: case 201:
 this.$ = {}; this.$[$$[$0-4].val] = $$[$0-2]; Object.assign(this.$, $$[$0]); 
break;
case 177: case 202:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 178: case 203:
 this.$ = {}; this.$[$$[$0-2].val] = $$[$0]; 
break;
case 179: case 180:
 this.$ = {op:'lit', type:'principal', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 181: case 182: case 183:
 this.$ = {op:'lit', type:'uint', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 184:
 this.$ = {op:'lit', type:'bool', line:getLine(this._$), subtype:'keyword', val:yytext}; 
break;
case 185:
 this.$ = {op:'lit', type:'none', line:getLine(this._$), subtype:'keyword', val:yytext }; 
break;
case 186:
 this.$={ op:'lit', type:'principal', line:getLine(this._$), val:$$[$0] }; 
break;
case 193:
 this.$ = {op:'lit', type:'string', line:getLine(this._$), size:BigInt(yytext.length-2), val:yytext.substring(1,yytext.length-1) }; 
break;
case 194:
 this.$ = { op:'lit', type:'int', line:getLine(this._$), val:BigInt(yytext)}; 
break;
case 195:
 this.$ = { op:'lit', type:'uint', line:getLine(this._$), val:BigInt(yytext.substring(1)) }; 
break;
case 196:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:true }; 
break;
case 197:
 this.$ = { op:'lit', type:'bool', line:getLine(this._$), val:false }; 
break;
case 198:
 var b=hexStringToBuffer(yytext.substr(2)); this.$ = { op:'lit', type:'buff', line:getLine(this._$), size:BigInt(b.length), val:b }; 
break;
case 199:
 this.$ = {op:'lit', type:'map', maptype:null, line:getLine(this._$), val:$$[$0-1]}; 
break;
case 204:
 this.$ = { op:'lit', type:'list', itemtype:null, line:getLine(this._$), size:BigInt($$[$0-1].length), val:$$[$0-1] }; 
break;
case 206:
 this.$ = [$$[$0]] 
break;
case 208:
 this.$=$$[$0]; this.$.val = $$[$0-1] + this.$.val; 
break;
case 210:
 this.$=$$[$0]; this.$.val = '.' + $$[$0-1] + this.$.val; 
break;
case 211:
 this.$ = { op:'lit', type:'principal', line:getLine(this._$), val:'.'+$$[$0] }; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,19:$V0,20:$V1,37:$V2,39:$V3,45:$V4,46:$V5,49:$V6,50:$V7,57:$V8,59:$V9,60:47,62:$Va,67:$Vb,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{1:[3]},{5:[1,63]},{1:[2,2]},{4:64,5:[2,4],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,19:$V0,20:$V1,37:$V2,39:$V3,45:$V4,46:$V5,49:$V6,50:$V7,57:$V8,59:$V9,60:47,62:$Va,67:$Vb,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{8:65,45:$VG},o($VH,[2,6]),o($VH,[2,7]),o($VH,[2,8]),o($VH,[2,9]),o($VH,[2,10]),o($VH,[2,11]),o($VH,[2,12]),{17:67,18:$VI,29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{45:[2,107],58:[1,94]},{45:[2,108]},{20:[1,95]},{20:[1,96]},{38:[1,97]},{38:[1,98]},{51:[1,99]},{52:100,60:101,74:$V61,134:$V71,139:$VA,147:103},{46:[1,105]},o($V81,[2,65]),o($V81,[2,66]),{20:[1,106]},{16:107,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:108,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:109,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:110,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:111,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:112,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($V81,[2,96]),{46:[1,113]},{46:$V91},{46:$Va1},{16:116,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{46:[1,117]},{46:[1,118]},o($V81,[2,179]),o($V81,[2,180]),o($V81,[2,181]),o($V81,[2,182]),o($V81,[2,183]),o($V81,[2,184]),o($V81,[2,185]),o($V81,[2,186]),o($V81,[2,187]),o($V81,[2,188]),o($V81,[2,189]),o($V81,[2,190]),o($V81,[2,191]),o($V81,[2,192]),{46:$Vb1},{46:$Vc1},o([18,21,29,41,43,46,48,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,104],[2,193]),o($V81,[2,194]),o($V81,[2,195]),o($V81,[2,196]),o($V81,[2,197]),o($V81,[2,198]),{16:122,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,73:$Vd1,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF,146:121},{20:$Ve1,60:125,139:$VA,145:123},{1:[2,1]},{5:[2,3]},o($VH,[2,5]),{20:[1,126]},o($VH,[2,13],{18:$Vf1}),{16:128,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{20:[1,129]},{16:130,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:131,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:132,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:133,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:134,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:135,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:136,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:137,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:138,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:139,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:140,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:141,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:142,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:143,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:144,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:145,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:146,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:147,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:148,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:149,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:150,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:151,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:155,20:$V1,35:177,39:$Vg1,46:$V5,48:$Vh1,55:186,60:47,71:23,72:$Vc,74:$Vd,75:$Vi1,76:$Vj1,77:$Vk1,78:$Vl1,79:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1,88:$Vv1,89:$Vw1,91:$Vx1,93:$Vy1,94:$Vz1,95:$VA1,96:$Vi,99:32,100:$Vj,102:$VB1,103:$VC1,105:$Vm,106:$Vn,107:$Vo,110:$VD1,111:$VE1,112:152,113:153,114:154,115:$VF1,118:$VG1,119:48,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($VM1,[2,15]),{45:[2,106]},{29:[1,189]},{21:[1,190]},{20:[1,191]},{16:192,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{39:[1,194],52:193,74:$V61,134:$V71,147:103},{20:[1,196],36:195},{21:[1,197]},{74:$V61,147:198},o($VN1,[2,209]),{20:[1,199]},{16:200,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($V81,[2,69]),{29:$VJ,46:$VK,48:[1,201],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($VO1,[2,71],{46:$VK,72:$VL,74:$VM,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT}),o($VO1,[2,72],{46:$VK,72:$VL,74:$VM,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT}),o($VP1,[2,79],{46:$VK,72:$VL,74:$VM}),o($VP1,[2,93],{46:$VK,72:$VL,74:$VM}),o($VP1,[2,94],{46:$VK,72:$VL,74:$VM}),{16:202,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:203,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:204,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($VP1,[2,103],{46:$VK,72:$VL,74:$VM}),{20:[1,205]},{20:[1,206]},{16:207,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:208,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{73:[1,209]},{29:$VJ,43:[1,210],46:$VK,72:$VL,73:[2,206],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{41:[1,211]},{98:[1,212]},{98:[1,213]},{46:[1,214]},o($VM1,[2,14]),{29:$VJ,46:$VK,72:$VL,73:[1,215],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($V81,[2,68]),o($VO1,[2,73],{46:$VK,72:$VL,74:$VM,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT}),o($VO1,[2,74],{46:$VK,72:$VL,74:$VM,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT}),o($VP1,[2,75],{46:$VK,72:$VL,74:$VM}),o($VP1,[2,76],{46:$VK,72:$VL,74:$VM}),o($VP1,[2,77],{46:$VK,72:$VL,74:$VM}),o($VP1,[2,78],{46:$VK,72:$VL,74:$VM}),o($VP1,[2,80],{46:$VK,72:$VL,74:$VM}),o([18,29,41,43,48,73,83,84,93,94,97,98,104],[2,81],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11}),o([18,29,41,43,48,73,84,93,94,97,98,104],[2,82],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11}),o($VQ1,[2,83],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT}),o($VQ1,[2,84],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT}),o($VR1,[2,85],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,85:$VW,86:$VX}),o($VR1,[2,86],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,85:$VW,86:$VX}),o($VR1,[2,87],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,85:$VW,86:$VX}),o($VR1,[2,88],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,85:$VW,86:$VX}),o($VS1,[2,89],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$}),o($VS1,[2,90],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$}),o([18,29,41,43,48,73,93,94,97,98,104],[2,91],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11}),o([18,29,41,43,48,73,94,97,98,104],[2,92],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21}),{29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,98:[1,216],104:$V51},o($VT1,[2,101],{29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51}),o($VT1,[2,102],{29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51}),{48:[1,217]},{43:[1,218],48:[2,120]},{43:[1,219],48:[2,121]},{29:$VJ,43:[1,220],46:$VK,48:[2,122],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($VU1,[2,124],{71:23,99:32,60:47,119:48,135:49,136:50,137:51,138:52,16:109,20:$V1,39:$V3,46:$V5,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF}),o($VU1,[2,125],{71:23,99:32,60:47,119:48,135:49,136:50,137:51,138:52,16:108,20:$V1,39:$V3,46:$V5,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF}),o($VU1,[2,126]),o($VU1,[2,127]),o($VU1,[2,128]),o($VU1,[2,129]),o($VU1,[2,130]),o($VU1,[2,131],{71:23,99:32,60:47,119:48,135:49,136:50,137:51,138:52,16:110,20:$V1,39:$V3,46:$V5,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF}),o($VU1,[2,132]),o($VU1,[2,133]),o($VU1,[2,134]),o($VU1,[2,135]),o($VU1,[2,136]),o($VU1,[2,137]),o($VU1,[2,138]),o($VU1,[2,139]),o($VU1,[2,140]),o($VU1,[2,141]),o($VU1,[2,142]),o($VU1,[2,143],{71:23,99:32,60:47,119:48,135:49,136:50,137:51,138:52,16:111,20:$V1,39:$V3,46:$V5,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF}),{35:221,39:$VV1,46:$Va1,55:186,102:$VW1,110:$VX1,111:$VY1,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},o($VU1,[2,152]),o($VZ1,$V_1,{46:$V91}),{90:[1,226]},o($VZ1,$V$1,{46:$Vb1}),o($VZ1,$V02,{46:$Vc1}),{72:[1,227]},o($V12,[2,160]),{72:[1,228]},{72:[1,229]},o($V12,[2,164]),{20:[1,231],60:232,124:230,139:$VA,145:123},{90:[1,233]},{16:234,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{22:235,23:236,24:237,25:238,26:239,30:[1,240],31:[1,241],35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{39:[1,246]},{18:[1,247],29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{21:[1,249],39:[1,248]},{38:$V42,41:$V52,44:252,53:250,54:251,56:$V62,57:$V72},{60:256,139:$VA},{139:[2,29]},{20:[1,257]},o($VN1,[2,208]),o($VN1,[2,211],{147:258,74:$V61}),{29:$VJ,46:$VK,48:[1,259],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($V81,[2,70]),{29:$VJ,43:[1,260],46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{29:$VJ,46:$VK,48:[1,261],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{29:$VJ,46:$VK,48:[1,262],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{48:[1,263]},{48:[1,264]},{29:$VJ,46:$VK,48:[1,265],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{29:$VJ,46:$VK,48:[1,266],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($V81,[2,204]),{16:122,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,73:$Vd1,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF,146:267},o($V81,[2,199]),{16:268,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:269,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{20:$V82,48:$V92,109:270},o($V81,[2,67]),{16:272,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($V81,[2,116]),{16:155,20:$V1,35:177,39:$Vg1,46:$V5,48:$Vh1,55:186,60:47,71:23,72:$Vc,74:$Vd,75:$Vi1,76:$Vj1,77:$Vk1,78:$Vl1,79:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1,88:$Vv1,89:$Vw1,91:$Vx1,93:$Vy1,94:$Vz1,95:$VA1,96:$Vi,99:32,100:$Vj,102:$VB1,103:$VC1,105:$Vm,106:$Vn,107:$Vo,110:$VD1,111:$VE1,112:273,113:153,114:154,115:$VF1,118:$VG1,119:48,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:155,20:$V1,35:177,39:$Vg1,46:$V5,48:$Vh1,55:186,60:47,71:23,72:$Vc,74:$Vd,75:$Vi1,76:$Vj1,77:$Vk1,78:$Vl1,79:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1,88:$Vv1,89:$Vw1,91:$Vx1,93:$Vy1,94:$Vz1,95:$VA1,96:$Vi,99:32,100:$Vj,102:$VB1,103:$VC1,105:$Vm,106:$Vn,107:$Vo,110:$VD1,111:$VE1,112:274,113:153,114:154,115:$VF1,118:$VG1,119:48,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:155,20:$V1,35:177,39:$Vg1,46:$V5,48:$Vh1,55:186,60:47,71:23,72:$Vc,74:$Vd,75:$Vi1,76:$Vj1,77:$Vk1,78:$Vl1,79:$Vm1,80:$Vn1,81:$Vo1,82:$Vp1,83:$Vq1,84:$Vr1,85:$Vs1,86:$Vt1,87:$Vu1,88:$Vv1,89:$Vw1,91:$Vx1,93:$Vy1,94:$Vz1,95:$VA1,96:$Vi,99:32,100:$Vj,102:$VB1,103:$VC1,105:$Vm,106:$Vn,107:$Vo,110:$VD1,111:$VE1,112:275,113:153,114:154,115:$VF1,118:$VG1,119:48,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($VU1,[2,151]),o($V12,$V$1),o($V12,$V02),o($V12,$V_1),{20:$Va2,60:277,124:230,139:$VA},{26:278,35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{119:279,140:$VB,141:$VC},{119:280,140:$VB,141:$VC},{119:281,140:$VB,141:$VC},{41:[1,282]},{98:[1,283]},{98:[1,284]},{26:285,35:244,38:$V22,39:$VV1,43:[1,286],55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{17:287,18:$VI,29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{18:[1,288]},{18:[1,289]},{18:[1,290]},{18:[1,291]},{20:$Vb2,27:[1,292],28:293},{20:$Vb2,28:295},{20:[1,297],32:296},{35:298,39:$VV1,55:186,102:$VW1,110:$VX1,111:$VY1,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},o($V12,[2,149]),o($V12,[2,150]),{90:[1,299]},{40:300,41:$Vc2,42:301,44:302,57:$V72},o($VH,[2,35]),{38:$V42,41:$V52,44:252,53:303,54:251,56:$V62,57:$V72},{20:[1,304]},{41:[1,305]},{41:[2,40],43:[1,306]},{45:[1,307]},{20:[1,308]},{38:[1,309]},{45:[2,45],58:[1,310]},{21:[1,311]},{18:[1,312]},o($VN1,[2,210]),{39:[1,313]},{20:[1,315],46:[1,316],101:314},o($V81,[2,99]),o($V81,[2,100]),o($V81,[2,104]),o($V81,[2,105]),o($V81,[2,114]),o($V81,[2,115]),{73:[2,205]},{29:$VJ,41:[2,202],43:[1,317],46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{29:$VJ,41:[2,203],43:[1,318],46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{48:[1,319]},{26:320,35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},o([18,29,41,43,48,73,98,104],[2,95],{46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41}),{48:[2,117]},{48:[2,118]},{48:[2,119]},{98:[1,321]},{98:[1,322]},{89:[1,323]},{73:[1,324]},{73:[1,325]},{73:[1,326]},o($V12,[2,165]),{16:268,20:$V1,26:327,35:244,38:$V22,39:$Vg1,46:$V5,55:186,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$VB1,103:$Vd2,105:$Vm,106:$Vn,107:$Vo,110:$VD1,111:$VE1,117:243,118:$VG1,119:48,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:269,20:$V1,26:329,35:244,38:$V22,39:$Vg1,46:$V5,55:186,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$VB1,103:$Vd2,105:$Vm,106:$Vn,107:$Vo,110:$VD1,111:$VE1,117:243,118:$VG1,119:48,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{43:[1,330]},{26:331,35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},o([5,19,20,37,39,45,46,49,50,57,59,62,66,67,72,74,75,76,81,95,96,100,102,103,105,106,107,108,110,111,127,128,129,130,131,132,133,134,139,140,141,142,143,144],[2,51],{18:$Vf1}),o($VH,[2,16]),o($VH,[2,17]),o($VH,[2,18]),o($VH,[2,19]),{26:332,35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{20:[1,333]},{20:[2,26]},{20:[1,334]},{20:[1,336],33:335},{20:[2,27]},o($V12,[2,148]),{20:[1,338],74:[1,340],102:[1,339],125:337},{41:[1,341]},{41:[2,32],43:[1,342]},{45:[1,343]},{41:[1,344]},{39:[1,345]},{18:[1,346]},{38:$V42,41:$V52,44:252,53:347,54:251,56:$V62,57:$V72},{20:[1,348]},{39:[1,349]},{52:350,74:$V61,134:$V71,147:103},{45:[2,46]},{20:[1,351]},o($VH,[2,48]),o($Ve2,$Vf2,{63:352,61:353,9:354,62:$Va}),{48:[1,355]},{48:[1,356]},{20:$Vg2,48:$Vh2,116:357},{20:$Ve1,60:125,139:$VA,145:359},{20:$Ve1,60:125,139:$VA,145:360},{39:[1,361]},{43:[1,362],48:[2,112]},{26:327,35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{26:329,35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{72:[1,363]},o($V12,[2,159]),o($V12,[2,161]),o($V12,[2,162]),{41:[2,177],43:[1,364]},{35:298,39:$VV1,46:$Va1,55:186,102:$VW1,110:$VX1,111:$VY1,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{41:[2,178],43:[1,365]},{26:366,35:244,38:$V22,39:$VV1,55:186,89:[1,367],102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{89:[1,368]},{18:[2,20]},{29:[1,369]},{18:[2,22],29:[1,370]},{34:371,35:372,39:$VV1,55:186,102:$VW1,110:$VX1,111:$VY1,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},o([39,102,110,111,118,120,121,122,123,126],[2,28]),{72:[1,374],74:[1,375],89:[1,373]},o($Vi2,[2,167]),{46:[1,376]},{20:[1,377]},{18:[1,378]},{40:379,41:$Vc2,42:301,44:302,57:$V72},{20:[1,380]},{18:[1,381]},{38:$V42,41:$V52,44:252,53:382,54:251,56:$V62,57:$V72},o($VH,[2,38]),{41:[2,39]},{46:[1,383]},{40:384,41:$Vc2,42:301,44:302,57:$V72},o($Vj2,[2,44]),{18:[1,385]},{41:[1,386]},{8:391,15:389,16:390,20:$V1,39:$V3,45:$VG,46:$V5,60:47,64:387,65:388,66:$Vk2,67:$Vb,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($Ve2,$Vf2,{9:354,61:393,62:$Va}),o($V81,[2,97]),o($V81,[2,98]),{48:[1,394]},{43:[1,395],48:[2,146]},{41:[2,200]},{41:[2,201]},o($Ve2,$Vf2,{61:353,9:354,63:396,62:$Va}),{20:$V82,48:$V92,109:397},{119:398,140:$VB,141:$VC},{20:$Va2,60:277,124:399,139:$VA},{20:$Va2,60:277,124:400,139:$VA},{89:[1,401]},o($V12,[2,173]),o($V12,[2,174]),{16:402,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{16:403,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{18:[2,24]},{18:[2,25]},o($V12,[2,166]),{16:404,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{20:[1,405]},{16:406,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($Vi2,[2,171]),o($VH,[2,30]),{41:[2,31]},{46:[1,407]},o($VH,[2,36]),{41:[1,408]},{26:410,35:244,38:$V22,39:$VV1,47:409,48:$Vl2,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{41:[1,411]},o($VH,[2,47]),o($Vm2,$Vn2,{68:412,69:413,70:[1,414]}),{41:[2,52]},{8:391,15:389,16:390,20:$V1,39:$V3,41:[2,54],45:$VG,46:$V5,60:47,64:415,65:388,66:$Vk2,67:$Vb,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($Vo2,[2,55]),{17:416,18:$VI,29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($Vo2,[2,57]),{16:417,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},o($Ve2,[2,49]),{27:[1,418]},{20:$Vg2,48:$Vh2,116:419},{41:[1,420]},{48:[2,111]},{73:[1,421]},{41:[2,175]},{41:[2,176]},o($V12,[2,172]),{18:[2,21],29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{18:[2,23],29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{29:$VJ,46:$VK,72:$VL,73:[1,422],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($Vi2,[2,170]),{29:$VJ,46:$VK,48:[1,423],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{26:410,35:244,38:$V22,39:$VV1,47:424,48:$Vl2,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},{18:[1,425]},{48:[1,426]},{43:[1,427],48:[2,154]},o($Vj2,[2,43]),o($Vm2,$Vn2,{69:428,70:[1,429]}),o($Vm2,[2,60]),{39:$Vp2,67:[1,430]},{41:[2,53]},o($Vo2,[2,56],{18:$Vf1}),{17:432,18:$VI,29:$VJ,46:$VK,72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{39:[1,433]},{48:[2,145]},o($Vm2,[2,110]),o($V12,[2,156]),o($Vi2,[2,169]),o($Vi2,[2,168]),{48:[1,434]},o($VH,[2,37]),{27:[1,435]},{26:410,35:244,38:$V22,39:$VV1,47:436,48:$Vl2,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},o($Vm2,[2,59]),{39:$Vp2,67:[1,437]},{46:[1,438]},o($Ve2,$Vf2,{61:353,9:354,63:439,62:$Va}),o($Vo2,[2,58],{18:$Vf1}),o($Ve2,$Vf2,{61:353,9:354,63:440,62:$Va}),{27:[1,441]},{55:442,126:$VL1},{48:[2,153]},{46:[1,443]},{16:444,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{41:[1,445]},{41:[1,446]},{26:447,35:244,38:$V22,39:$VV1,55:186,102:$VW1,103:$V32,110:$VX1,111:$VY1,117:243,118:$VG1,120:$VH1,121:$VI1,122:$VJ1,123:$VK1,126:$VL1},o($Vj2,[2,42]),{16:448,20:$V1,39:$V3,46:$V5,60:47,71:23,72:$Vc,74:$Vd,75:$Ve,76:$Vf,81:$Vg,95:$Vh,96:$Vi,99:32,100:$Vj,102:$Vk,103:$Vl,105:$Vm,106:$Vn,107:$Vo,110:$Vq,111:$Vr,119:48,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:49,136:50,137:51,138:52,139:$VA,140:$VB,141:$VC,142:$VD,143:$VE,144:$VF},{29:$VJ,46:$VK,48:[1,449],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},o($Vm2,[2,63]),{48:[2,144]},o($Vj2,[2,34]),{29:$VJ,46:$VK,48:[1,450],72:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VT,83:$VU,84:$VV,85:$VW,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,97:$V41,104:$V51},{39:[1,451]},{39:[1,452]},o($Ve2,$Vf2,{61:353,9:354,63:453,62:$Va}),o($Ve2,$Vf2,{61:353,9:354,63:454,62:$Va}),{41:[1,455]},{41:[1,456]},o($Vq2,[2,62]),o($Vq2,[2,61])],
defaultActions: {3:[2,2],15:[2,108],63:[2,1],64:[2,3],94:[2,106],196:[2,29],267:[2,205],273:[2,117],274:[2,118],275:[2,119],294:[2,26],297:[2,27],310:[2,46],332:[2,20],347:[2,39],359:[2,200],360:[2,201],371:[2,24],372:[2,25],379:[2,31],387:[2,52],397:[2,111],399:[2,175],400:[2,176],415:[2,53],419:[2,145],436:[2,153],446:[2,144]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function prependChild(node, child){
        node.unshift(child);
        return node;
    }
    function getLine(v) {
        if (typeof v == 'number') return v;
        return v.first_line;
    }
    function parseError(yy, opts) {
        var expected = opts.expected ? `Expecting ${opts.expected}` : '';
        yy.parser.parseError(`Parse error on line ${opts.line}:\n${yy.lexer.showPosition()}\n${expected}`, {});
    }
    function expectText(yy, lineno, desired, actual) {
        if (desired == actual) return;
        parseError(yy, {
             line: lineno,
             expected:`'${desired}' not '${actual}'`
        });
    }
    function hexStringToBuffer(str) {
        if (str.length % 2 == 1) str='0'+str;
        return Buffer.from(str,'hex');
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 59;
break;
case 2:return 62;
break;
case 3:return 108;
break;
case 4:return 57;
break;
case 5:return 58;
break;
case 6:return 45;
break;
case 7:return 19;
break;
case 8:return 50;
break;
case 9:return 51;
break;
case 10:return 37;
break;
case 11:return 'USE';
break;
case 12:return 21;
break;
case 13:return 38;
break;
case 14:return 49;
break;
case 15:return 56;
break;
case 16:return 30;
break;
case 17:return 31;
break;
case 18:return 67;
break;
case 19:return 70;
break;
case 20:return 66;
break;
case 21:return 100;
break;
case 22:return 106;
break;
case 23:return 107;
break;
case 24:return 118;
break;
case 25:return 110;
break;
case 26:return 111;
break;
case 27:return 121;
break;
case 28:return 123;
break;
case 29:return 122;
break;
case 30:return 122;
break;
case 31:return 102;
break;
case 32:return 126;
break;
case 33:return 120;
break;
case 34:return 103;
break;
case 35:return 105;
break;
case 36:return 142;
break;
case 37:return 143;
break;
case 38:return 133;
break;
case 39:return 127;
break;
case 40:return 128;
break;
case 41:return 129;
break;
case 42:return 130;
break;
case 43:return 131;
break;
case 44:return 132;
break;
case 45:return 140;
break;
case 46:return 141;
break;
case 47:return 144;
break;
case 48:return 134;
break;
case 49:return 20;
break;
case 50:return 139;
break;
case 51:return 76;
break;
case 52:return 75;
break;
case 53:return 77;
break;
case 54:return 78;
break;
case 55:return 79;
break;
case 56:return 80;
break;
case 57:return 82;
break;
case 58:return 81;
break;
case 59:return 83;
break;
case 60:return 84;
break;
case 61:return 85;
break;
case 62:return 86;
break;
case 63:return 87;
break;
case 64:return 88;
break;
case 65:return 89;
break;
case 66:return 90;
break;
case 67:return 91;
break;
case 68:return 92;
break;
case 69:return 104;
break;
case 70:return 29;
break;
case 71:return 93;
break;
case 72:return 94;
break;
case 73:return 95;
break;
case 74:return 96;
break;
case 75:return 74;
break;
case 76:return 98;
break;
case 77:return 18;
break;
case 78:return 43;
break;
case 79:return 46;
break;
case 80:return 48;
break;
case 81:return 39;
break;
case 82:return 41;
break;
case 83:return 72;
break;
case 84:return 73;
break;
case 85:return 97;
break;
case 86:return 27;
break;
case 87:/* skip whitespace */
break;
case 88:return 'UNKNOWN';
break;
case 89:return 5;
break;
case 90:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:import)/,/^(?:const)/,/^(?:private)/,/^(?:public)/,/^(?:readonly)/,/^(?:function)/,/^(?:persist)/,/^(?:declare)/,/^(?:extern)/,/^(?:define)/,/^(?:use)/,/^(?:as)/,/^(?:trait)/,/^(?:implement)/,/^(?:implements)/,/^(?:fungible-token)/,/^(?:nonfungible-token)/,/^(?:if)/,/^(?:else)/,/^(?:return)/,/^(?:foreach)/,/^(?:_countof)/,/^(?:_typeof)/,/^(?:list)/,/^(?:int)/,/^(?:uint)/,/^(?:bool)/,/^(?:string-ascii)/,/^(?:string-utf8)/,/^(?:string)/,/^(?:principal)/,/^(?:response)/,/^(?:buff)/,/^(?:optional)/,/^(?:delete)/,/^(?:true)/,/^(?:false)/,/^(?:none)/,/^(?:contract-caller)/,/^(?:tx-sender)/,/^(?:block-height)/,/^(?:burn-block-height)/,/^(?:stx-liquid-supply)/,/^(?:is-in-regtest)/,/^(?:([0-9])+)/,/^(?:u([0-9])+)/,/^(?:0x([0-9A-Fa-f])*)/,/^(?:([S][A-Z0-9]{39,40}))/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*[!?]{0,1}))/,/^(?:("(?:[^"\\]|\\.)*"))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\*\*)/,/^(?:\^)/,/^(?:~)/,/^(?:&)/,/^(?:\|)/,/^(?:<<)/,/^(?:>>)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:\?=)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:#)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:=>)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crystalAst;
exports.Parser = crystalAst.Parser;
exports.parse = function () { return crystalAst.parse.apply(crystalAst, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}